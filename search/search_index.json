{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JTSDK Tools \u00b6 This repository is designed to work specifically with the JTSDK Tools Version 3 tool-chain. Software Delivery \u00b6 Delivery is directly from the master branch. Branches are used for development and testing, while reserving the master branch in a stable condition for end users. Tags are used to archive milestones, and will appear in the release section . See the Matrix below for a list of artifacts that can be tested as NetCore Global Tools . Community Support \u00b6 To assist users with installation, usage, compiling applications, and general discussion, use: Post: JTSDK@groups.io Subscribe: JTSDK+subscribe@groups.io Unsubscribe: JTSDK+unsubscribe@groups.io Group Owner: JTSDK+owner@groups.io Help: JTSDK+help@groups.io Installation \u00b6 Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. See JTSDK Tools Website for detailed installation instructions. Bug Reports \u00b6 For submitting bug reports and feature requests, use the Issue Tracker . The aim of JTSDK-Tools is to use an Agile delivery approach to create a high-quality, yet flexible build system. Utilizing Github's Issue Tracker . users can quickly see the status of any particular request, discuss the merits, and implement the final disposition. Supported OS \u00b6 At present, this repository only supports Windows. Later releases with include generic Linux support, and additional Ubuntu / Debian specific artifacts. Windows Win-10 x86-64 / x86-32 Win-7|8 x86-64 / x86-32, in theory, but not tested. Win-XP and Vista are not supported. Linux Linux - Unsupported at this time. Arm Devices - Unsupported at this time. System Requirements \u00b6 This project creates a development-environment that supports many languages. Performance has a direct Correlation to system resources. While it is possible to build applications on marginal systems, using minimal hardware will lead to lengthy compiling times and sub-par system performance. With that in mind, the following should be considered the bare-minimum requirements: CPU: 2x Cores @ 2.5+ Ghz. (More Cores + Higher Clock Rates) = Better Performance RAM: 4GB Minimum Disk Space: At least 25GB to 30GB of Free Space SSD - If you have them, use them!","title":"Home"},{"location":"#jtsdk-tools","text":"This repository is designed to work specifically with the JTSDK Tools Version 3 tool-chain.","title":"JTSDK Tools"},{"location":"#software-delivery","text":"Delivery is directly from the master branch. Branches are used for development and testing, while reserving the master branch in a stable condition for end users. Tags are used to archive milestones, and will appear in the release section . See the Matrix below for a list of artifacts that can be tested as NetCore Global Tools .","title":"Software Delivery"},{"location":"#community-support","text":"To assist users with installation, usage, compiling applications, and general discussion, use: Post: JTSDK@groups.io Subscribe: JTSDK+subscribe@groups.io Unsubscribe: JTSDK+unsubscribe@groups.io Group Owner: JTSDK+owner@groups.io Help: JTSDK+help@groups.io","title":"Community Support"},{"location":"#installation","text":"Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. See JTSDK Tools Website for detailed installation instructions.","title":"Installation"},{"location":"#bug-reports","text":"For submitting bug reports and feature requests, use the Issue Tracker . The aim of JTSDK-Tools is to use an Agile delivery approach to create a high-quality, yet flexible build system. Utilizing Github's Issue Tracker . users can quickly see the status of any particular request, discuss the merits, and implement the final disposition.","title":"Bug Reports"},{"location":"#supported-os","text":"At present, this repository only supports Windows. Later releases with include generic Linux support, and additional Ubuntu / Debian specific artifacts. Windows Win-10 x86-64 / x86-32 Win-7|8 x86-64 / x86-32, in theory, but not tested. Win-XP and Vista are not supported. Linux Linux - Unsupported at this time. Arm Devices - Unsupported at this time.","title":"Supported OS"},{"location":"#system-requirements","text":"This project creates a development-environment that supports many languages. Performance has a direct Correlation to system resources. While it is possible to build applications on marginal systems, using minimal hardware will lead to lengthy compiling times and sub-par system performance. With that in mind, the following should be considered the bare-minimum requirements: CPU: 2x Cores @ 2.5+ Ghz. (More Cores + Higher Clock Rates) = Better Performance RAM: 4GB Minimum Disk Space: At least 25GB to 30GB of Free Space SSD - If you have them, use them!","title":"System Requirements"},{"location":"tools/cli-tools-overview/","text":"CLI Tools Overview \u00b6 The following lists the command line tools available in JTSDK-Tools v3 . Each tool has it's own documentation. To view the documentation for a particular tool, click on the links in the Name column. Where possible, each tool will be written in at least two languages. C# (dotnet core) applications will generally be first, followed by Python, then Java. This enables users to choose which optional-language they would like to install. NOTE: the commands listed below represent the DOSKEY's Command associated with each application. The long form of each command will be in the application documentation. Status Explication \u00b6 Each script / application is accompanied by a Status column. The following explains the meanings used: Name Description Release fully functional for it's intended purpose Development still a work in progress, not ready for production use Test App application for testing alternative frameworks Deferred while technically viable, work has not begun Incompatible not applicable for the given Language Environment \u00b6 Environment variables are set either by the operating system itself, by users adding a variable, or the JTSDK-Tools Environment Script. If the variable is not set, or cannot be found, a message of -- not set -- or -- unavailable -- will be displayed in path section. Name Command Language Status Description jtenv jtenv -h C-Sharp Release Show environment variables using C# / .Net Core jtenvjv jtenv -h Java Test App same as above using Java jtenvpy jtenv -h Python Test App same as above using Python Configuration \u00b6 The configuration scripts set various options for controlling the environment, changing tool-chains, and other runtime activities. Name Command Language Status Description jtconfig jtconfig -h C-Sharp Release Configure runtime variables WSJT-X Compiling \u00b6 These applications are used to compile WSJT-X from source code. Name Command Language Status Description jtbuildcm jtbuild-cm -h Batch Release Compile WSJT-X using Windows Batch Hamlib Compiling \u00b6 These scripts, where possible, are used to compile Hamlib from source code. Due to the complexities between the standard Windows Environment, and that of MSYS2, it may not be possible to build Hamlib on windows using Java, and / or Python. If and when this is made possible, the appropriate scripts will be added to the matrix. Name Command Language Status Description build-hamlib.sh build-hamlib -h Bash Release Compile Hamlib Library for Windows build-hamlib-py build-hamlib -h Bash Development Investigating use with MSYS2","title":"Overview"},{"location":"tools/cli-tools-overview/#cli-tools-overview","text":"The following lists the command line tools available in JTSDK-Tools v3 . Each tool has it's own documentation. To view the documentation for a particular tool, click on the links in the Name column. Where possible, each tool will be written in at least two languages. C# (dotnet core) applications will generally be first, followed by Python, then Java. This enables users to choose which optional-language they would like to install. NOTE: the commands listed below represent the DOSKEY's Command associated with each application. The long form of each command will be in the application documentation.","title":"CLI Tools Overview"},{"location":"tools/cli-tools-overview/#status-explication","text":"Each script / application is accompanied by a Status column. The following explains the meanings used: Name Description Release fully functional for it's intended purpose Development still a work in progress, not ready for production use Test App application for testing alternative frameworks Deferred while technically viable, work has not begun Incompatible not applicable for the given Language","title":"Status Explication"},{"location":"tools/cli-tools-overview/#environment","text":"Environment variables are set either by the operating system itself, by users adding a variable, or the JTSDK-Tools Environment Script. If the variable is not set, or cannot be found, a message of -- not set -- or -- unavailable -- will be displayed in path section. Name Command Language Status Description jtenv jtenv -h C-Sharp Release Show environment variables using C# / .Net Core jtenvjv jtenv -h Java Test App same as above using Java jtenvpy jtenv -h Python Test App same as above using Python","title":"Environment"},{"location":"tools/cli-tools-overview/#configuration","text":"The configuration scripts set various options for controlling the environment, changing tool-chains, and other runtime activities. Name Command Language Status Description jtconfig jtconfig -h C-Sharp Release Configure runtime variables","title":"Configuration"},{"location":"tools/cli-tools-overview/#wsjt-x-compiling","text":"These applications are used to compile WSJT-X from source code. Name Command Language Status Description jtbuildcm jtbuild-cm -h Batch Release Compile WSJT-X using Windows Batch","title":"WSJT-X Compiling"},{"location":"tools/cli-tools-overview/#hamlib-compiling","text":"These scripts, where possible, are used to compile Hamlib from source code. Due to the complexities between the standard Windows Environment, and that of MSYS2, it may not be possible to build Hamlib on windows using Java, and / or Python. If and when this is made possible, the appropriate scripts will be added to the matrix. Name Command Language Status Description build-hamlib.sh build-hamlib -h Bash Release Compile Hamlib Library for Windows build-hamlib-py build-hamlib -h Bash Development Investigating use with MSYS2","title":"Hamlib Compiling"},{"location":"tools/global-tools-overview/","text":".Net Core Global Tools \u00b6 Starting with Dotnet Core SDK 2.1.300, users can publish dotnet core apps to their home user sapce, which enables access globally from within. Publish Locations \u00b6 Windows Path: %USERPROFILE%\\.dotnet\\tools Linux / MacOS path: $HOME/.dotnet/tools About .Net Core \u00b6 A .NET Core Global Tool is a special NuGet package that contains a console application. A Global Tool can be installed on your machine on a default location that is included in the PATH environment variable or on a custom location. Find information about the tool (usually a website or GitHub page). Check the author and statistics in the home for the feed (usually NuGet.org). Install the tool. Call the tool. Update the tool. Uninstall the tool. -- Microsoft Documentation Project Description \u00b6 Where possible, all JTSDK Net Core Applications will support Global Tool Installation. The following example shows how to publish jtconfig artifacts globally. Clone Repository \u00b6 mkdir (C|D):\\JTSDK-Tools\\tmp cd (C|D):\\JTSDK-Tools\\tmp git clone https://github.com/KI7MT/jtsdk-tools.git Build and Install \u00b6 dotnet pack -c release -o nupkg dotnet tool install --add-source .\\nupkg -g JTConfig Run Application \u00b6 Open a Windows Command Prompt, and type the following: NOTE: You do not need to be in the JTSDK Environment : JTConfig -h Uninstall \u00b6 dotnet tool uninstall -g JTConfig","title":"NetCore Global Tools"},{"location":"tools/global-tools-overview/#net-core-global-tools","text":"Starting with Dotnet Core SDK 2.1.300, users can publish dotnet core apps to their home user sapce, which enables access globally from within.","title":".Net Core Global Tools"},{"location":"tools/global-tools-overview/#publish-locations","text":"Windows Path: %USERPROFILE%\\.dotnet\\tools Linux / MacOS path: $HOME/.dotnet/tools","title":"Publish Locations"},{"location":"tools/global-tools-overview/#about-net-core","text":"A .NET Core Global Tool is a special NuGet package that contains a console application. A Global Tool can be installed on your machine on a default location that is included in the PATH environment variable or on a custom location. Find information about the tool (usually a website or GitHub page). Check the author and statistics in the home for the feed (usually NuGet.org). Install the tool. Call the tool. Update the tool. Uninstall the tool. -- Microsoft Documentation Project","title":"About .Net Core"},{"location":"tools/global-tools-overview/#description","text":"Where possible, all JTSDK Net Core Applications will support Global Tool Installation. The following example shows how to publish jtconfig artifacts globally.","title":"Description"},{"location":"tools/global-tools-overview/#clone-repository","text":"mkdir (C|D):\\JTSDK-Tools\\tmp cd (C|D):\\JTSDK-Tools\\tmp git clone https://github.com/KI7MT/jtsdk-tools.git","title":"Clone Repository"},{"location":"tools/global-tools-overview/#build-and-install","text":"dotnet pack -c release -o nupkg dotnet tool install --add-source .\\nupkg -g JTConfig","title":"Build and Install"},{"location":"tools/global-tools-overview/#run-application","text":"Open a Windows Command Prompt, and type the following: NOTE: You do not need to be in the JTSDK Environment : JTConfig -h","title":"Run Application"},{"location":"tools/global-tools-overview/#uninstall","text":"dotnet tool uninstall -g JTConfig","title":"Uninstall"},{"location":"tools/jtbuildcm/","text":"Build WSJT-X \u00b6 The following is a short walkthrough in building the new WSJT-X Git Repository using jtbuild . The build script does not depend on Git, nor has any interaction with Git. If the user wishes to build from different URL / Repository, all that is required is to update the build.txt file with the new checkout path. IMPORTANT: - This script is temporary, and may be removed at any time. The script will persist until an appropriate .Net Core application can replace the functionality. Target specific custom builds have been ommitted from this release. If deemed required, it will be added to the .Net Core replacement application. Build Targets \u00b6 # In JTSDK-Tools Environment jtbuild rinstall jtbuild dinstall jtbuild rconfig jtbuild dconfig jtbuild package jtbuild docs Build Options \u00b6 Only four options are available in this script. Use jtconfig -h for assistance with setting these options. Item Action Description qt59 enable or disable Use QT 5.9.5 clean enable or disable Clean Build tree before compile reconfigure enable or disable Reconfigure source tree before compile autorun enable or disable Run WSJT-X after compiling The actions are the same as within the standard SVN build script. Default Profile \u00b6 Source and Destination directories are provided by the built.txt , located at (C|D):\\JTSDK-Tools\\tmp\\build.txt The build.txt file contains just two lines of interest, SRCD and DEST. Only the paths should change, do not change the prefix. For this example, the file contains the following: # For use with jtbuild only # - Only the paths need to be changed # - Do not use spaces in the paths as the build will fail # - Ensure there is only one space between the prefix and path # Edit the next line to set Source Location SRCD D:\\JTSDK-Tools\\tmp\\wsjtx # Edit the next line to set Destination Directory DEST D:\\JTSDK-Tools\\tmp\\wsjtx-output SRCD represents the location and name of the of the repository checkout DEST is the root location where the artifacts will be located. If you wish to use a different checkout location, update the SRD path. If you would like a different Destination directory, update the DEST path. Using Sourceforge \u00b6 It should not matter which repository service is used. For this example, we'll being using Sourceforge and the WSJT-X Master Branch . As noted earlier, jtbuild does not know of, nor is it concerned with Git. All repository management should be performed outside of the jtbuild script by using an appropriate Git Client. Clone Repository \u00b6 You can use any Git Client you like. The only things that are of concern to the jtbuild script is the full path including the checkout-name, and the destination directory. For this build example, we'll be using the following: Checkout Type ..........: Anonymous Git Repo URL ...........: https://git.code.sf.net/p/wsjt/wsjtx Git Client .............: Git-Bash or Git-CMD Source Directory .......: (C|D):\\JTSDK-Tools\\tmp\\wsjtx Destination Directory ..: (C|D):\\JTSDK-Tools\\wsjtx-output Step-1: Clone Repository \u00b6 Open a Windows Command Prompt or Git-Bash terminal, and checkout WSJT-X with the following command: Note - You can change the final folder name if you wish. However, make sure to update the build.txt file if you do. # Clone WSJT-X * Using Windows Console: git clone https://git.code.sf.net/p/wsjt/wsjtx (C|D):\\JTSDK-Tools\\tmp\\wsjtx * Using Git-Bash git clone https://git.code.sf.net/p/wsjt/wsjtx /(c|d)/JTSDK-Tools/tmp/wsjtx Both commands should yield the same results, a new checkout in: (C|D):\\JTSDK-Tools\\tmp\\wsjtx Step-2: Update build.txt File \u00b6 At this point, ensure you have updated both the SRCD and DEST path locations in (C|D):\\JTSDK-Tools\\tmp\\build.txt with your choices in checkout and destination locations. Step-3: Build Master Branch \u00b6 You can use any of the items in Available Build Commands . For this example we'll build the Master Release Install target. # In a Windows Command Prompt or Git-Bash Terminal, change directory to the # source location #Windows CMD cd /d (C|D):\\JTSDK-Tools\\tmp\\wsjtx #Git-Bash: cd /(c|d)/JTSDK/tmp/wsjtx #Check which branch you're on with: git branch Git should return: * master #Open JTSDK-Tools Config # - Ensure your're on QT55 # - Ensure you've built Hamlib3, then type: jtbuild rinstall Note: you can use any of the following commands: rinstall Builds the Release Install target dinstall Builds the Debug Install target rconfig Configure Only Release Install target dconfig Configure Only Debug Install target package Release Install Win32 Installer Package docs Compiles the documentation # The Output should be located at or near: Source : (C|D):\\JTSDK-Tools\\tmp\\wsjtx Output : (C|D):\\JTSDK-Tools\\tmp\\wsjtx-output\\qt\\5.5\\1.9.2\\Release\\{build, install, package} Summary \u00b6 In theory, you should be able to build any Recent (1.8 - 1.9) branch or tag as long as the build.txt file is updated with the correct Source and Destination locations.","title":"jtbuildcm"},{"location":"tools/jtbuildcm/#build-wsjt-x","text":"The following is a short walkthrough in building the new WSJT-X Git Repository using jtbuild . The build script does not depend on Git, nor has any interaction with Git. If the user wishes to build from different URL / Repository, all that is required is to update the build.txt file with the new checkout path. IMPORTANT: - This script is temporary, and may be removed at any time. The script will persist until an appropriate .Net Core application can replace the functionality. Target specific custom builds have been ommitted from this release. If deemed required, it will be added to the .Net Core replacement application.","title":"Build WSJT-X"},{"location":"tools/jtbuildcm/#build-targets","text":"# In JTSDK-Tools Environment jtbuild rinstall jtbuild dinstall jtbuild rconfig jtbuild dconfig jtbuild package jtbuild docs","title":"Build Targets"},{"location":"tools/jtbuildcm/#build-options","text":"Only four options are available in this script. Use jtconfig -h for assistance with setting these options. Item Action Description qt59 enable or disable Use QT 5.9.5 clean enable or disable Clean Build tree before compile reconfigure enable or disable Reconfigure source tree before compile autorun enable or disable Run WSJT-X after compiling The actions are the same as within the standard SVN build script.","title":"Build Options"},{"location":"tools/jtbuildcm/#default-profile","text":"Source and Destination directories are provided by the built.txt , located at (C|D):\\JTSDK-Tools\\tmp\\build.txt The build.txt file contains just two lines of interest, SRCD and DEST. Only the paths should change, do not change the prefix. For this example, the file contains the following: # For use with jtbuild only # - Only the paths need to be changed # - Do not use spaces in the paths as the build will fail # - Ensure there is only one space between the prefix and path # Edit the next line to set Source Location SRCD D:\\JTSDK-Tools\\tmp\\wsjtx # Edit the next line to set Destination Directory DEST D:\\JTSDK-Tools\\tmp\\wsjtx-output SRCD represents the location and name of the of the repository checkout DEST is the root location where the artifacts will be located. If you wish to use a different checkout location, update the SRD path. If you would like a different Destination directory, update the DEST path.","title":"Default Profile"},{"location":"tools/jtbuildcm/#using-sourceforge","text":"It should not matter which repository service is used. For this example, we'll being using Sourceforge and the WSJT-X Master Branch . As noted earlier, jtbuild does not know of, nor is it concerned with Git. All repository management should be performed outside of the jtbuild script by using an appropriate Git Client.","title":"Using Sourceforge"},{"location":"tools/jtbuildcm/#clone-repository","text":"You can use any Git Client you like. The only things that are of concern to the jtbuild script is the full path including the checkout-name, and the destination directory. For this build example, we'll be using the following: Checkout Type ..........: Anonymous Git Repo URL ...........: https://git.code.sf.net/p/wsjt/wsjtx Git Client .............: Git-Bash or Git-CMD Source Directory .......: (C|D):\\JTSDK-Tools\\tmp\\wsjtx Destination Directory ..: (C|D):\\JTSDK-Tools\\wsjtx-output","title":"Clone Repository"},{"location":"tools/jtbuildcm/#step-1-clone-repository","text":"Open a Windows Command Prompt or Git-Bash terminal, and checkout WSJT-X with the following command: Note - You can change the final folder name if you wish. However, make sure to update the build.txt file if you do. # Clone WSJT-X * Using Windows Console: git clone https://git.code.sf.net/p/wsjt/wsjtx (C|D):\\JTSDK-Tools\\tmp\\wsjtx * Using Git-Bash git clone https://git.code.sf.net/p/wsjt/wsjtx /(c|d)/JTSDK-Tools/tmp/wsjtx Both commands should yield the same results, a new checkout in: (C|D):\\JTSDK-Tools\\tmp\\wsjtx","title":"Step-1: Clone Repository"},{"location":"tools/jtbuildcm/#step-2-update-buildtxt-file","text":"At this point, ensure you have updated both the SRCD and DEST path locations in (C|D):\\JTSDK-Tools\\tmp\\build.txt with your choices in checkout and destination locations.","title":"Step-2: Update build.txt File"},{"location":"tools/jtbuildcm/#step-3-build-master-branch","text":"You can use any of the items in Available Build Commands . For this example we'll build the Master Release Install target. # In a Windows Command Prompt or Git-Bash Terminal, change directory to the # source location #Windows CMD cd /d (C|D):\\JTSDK-Tools\\tmp\\wsjtx #Git-Bash: cd /(c|d)/JTSDK/tmp/wsjtx #Check which branch you're on with: git branch Git should return: * master #Open JTSDK-Tools Config # - Ensure your're on QT55 # - Ensure you've built Hamlib3, then type: jtbuild rinstall Note: you can use any of the following commands: rinstall Builds the Release Install target dinstall Builds the Debug Install target rconfig Configure Only Release Install target dconfig Configure Only Debug Install target package Release Install Win32 Installer Package docs Compiles the documentation # The Output should be located at or near: Source : (C|D):\\JTSDK-Tools\\tmp\\wsjtx Output : (C|D):\\JTSDK-Tools\\tmp\\wsjtx-output\\qt\\5.5\\1.9.2\\Release\\{build, install, package}","title":"Step-3: Build Master Branch"},{"location":"tools/jtbuildcm/#summary","text":"In theory, you should be able to build any Recent (1.8 - 1.9) branch or tag as long as the build.txt file is updated with the correct Source and Destination locations.","title":"Summary"},{"location":"tools/jtconfig/","text":"Option Configuration \u00b6 Application Data Name JTConfig Version 3.0.1 Arch 64 bit preferred Status Release Description Used for configuring options in JTSDK-Tools Available Options \u00b6 Option Description Autorun Runs an application after compiling Clean Cleans the build tree Cmake310 Enable CMake version 3.10 v.s. 3.5.2 Java Indicates Java is enabled in the environment PostgreSQL Indicates PostgreSQL is enabled in the environment QT59 Enable Qt 5.9 and associated GCC tool-chain Quiet Suppress screen display messages Reconfigure Re-Run Configure before compiling Separate Separate builds by versions and build type SQLite3 Indicates Sqlite3 is enabled in the environment Unix Enable MSYS2 Unix Command Line Tools Usage \u00b6 Display Help Message: JTConfig -h \u00b6 Display Help Menu List Option Status: JTConfig -l \u00b6 Option Status Enable Default Options: JTConfig -e default \u00b6 Enable Default Options","title":"jtconfig"},{"location":"tools/jtconfig/#option-configuration","text":"Application Data Name JTConfig Version 3.0.1 Arch 64 bit preferred Status Release Description Used for configuring options in JTSDK-Tools","title":"Option Configuration"},{"location":"tools/jtconfig/#available-options","text":"Option Description Autorun Runs an application after compiling Clean Cleans the build tree Cmake310 Enable CMake version 3.10 v.s. 3.5.2 Java Indicates Java is enabled in the environment PostgreSQL Indicates PostgreSQL is enabled in the environment QT59 Enable Qt 5.9 and associated GCC tool-chain Quiet Suppress screen display messages Reconfigure Re-Run Configure before compiling Separate Separate builds by versions and build type SQLite3 Indicates Sqlite3 is enabled in the environment Unix Enable MSYS2 Unix Command Line Tools","title":"Available Options"},{"location":"tools/jtconfig/#usage","text":"","title":"Usage"},{"location":"tools/jtconfig/#display-help-message-jtconfig-h","text":"Display Help Menu","title":"Display Help Message: JTConfig -h"},{"location":"tools/jtconfig/#list-option-status-jtconfig-l","text":"Option Status","title":"List Option Status: JTConfig -l"},{"location":"tools/jtconfig/#enable-default-options-jtconfig-e-default","text":"Enable Default Options","title":"Enable Default Options: JTConfig -e default"},{"location":"tools/jtenv/","text":"Environment \u00b6 Application Data Name JTEnv Version 3.0.1 Arch 64 bit preferred Status Release Description C-Sharp application to list environment variables Available Options \u00b6 JTEnv is a quick-check utility to used to verify environment variables. There are three groups currently supported: User - lists basic user path variables Java - lists commonly used / required Java related variables System - common system variables such as OS, ARCH , etc. JTSDK - variable applicable to the JTSDK-Tools environment Usage \u00b6 There are three groups of options available through this small app: User , Java , and System . NOTE: the options listed are but a small subset of what is available at any given time. However, the items listed are of particular interest to JTSDK-Tools . List Help \u00b6 # In the JTSDK-Tools Environment jtenv -h # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -h Help Menu List All Option Groups \u00b6 # In the JTSDK-Tools Environment jtenv -a # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -a All Groups List User Group \u00b6 # In the JTSDK-Tools Environment jtenv -u # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -u User Group List Java Group \u00b6 # In the JTSDK-Tools Environment jtenv -j # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -j Java Group List System Group \u00b6 # In the JTSDK-Tools Environment jtenv -s # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -s System Group","title":"jtenv"},{"location":"tools/jtenv/#environment","text":"Application Data Name JTEnv Version 3.0.1 Arch 64 bit preferred Status Release Description C-Sharp application to list environment variables","title":"Environment"},{"location":"tools/jtenv/#available-options","text":"JTEnv is a quick-check utility to used to verify environment variables. There are three groups currently supported: User - lists basic user path variables Java - lists commonly used / required Java related variables System - common system variables such as OS, ARCH , etc. JTSDK - variable applicable to the JTSDK-Tools environment","title":"Available Options"},{"location":"tools/jtenv/#usage","text":"There are three groups of options available through this small app: User , Java , and System . NOTE: the options listed are but a small subset of what is available at any given time. However, the items listed are of particular interest to JTSDK-Tools .","title":"Usage"},{"location":"tools/jtenv/#list-help","text":"# In the JTSDK-Tools Environment jtenv -h # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -h Help Menu","title":"List Help"},{"location":"tools/jtenv/#list-all-option-groups","text":"# In the JTSDK-Tools Environment jtenv -a # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -a All Groups","title":"List All Option Groups"},{"location":"tools/jtenv/#list-user-group","text":"# In the JTSDK-Tools Environment jtenv -u # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -u User Group","title":"List User Group"},{"location":"tools/jtenv/#list-java-group","text":"# In the JTSDK-Tools Environment jtenv -j # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -j Java Group","title":"List Java Group"},{"location":"tools/jtenv/#list-system-group","text":"# In the JTSDK-Tools Environment jtenv -s # From Windows Command Prompt: cd /d (C|D):\\JTSDK-Tools\\tools\\apps dotnet JTEnv -s System Group","title":"List System Group"},{"location":"tools/jtenvjv/","text":"Environment Using Java \u00b6 Application Data Name jtenvjv Version 3.0.1 Arch 64 bit preferred Java Version 8, 9, 10 Status Release Description Java application to list environment variables Compiling \u00b6 No external libraries are required to build the app. Runs on Java 8, 9 and 10 # In Window command prompt, or JTSDK-Tools Environment (C|D):\\JTSDK-Tools\\scripts\\java # Compile javac JTEnv-jv.java # Run java JTEnv-jv -h Usage \u00b6 JTEnv-jv is a quick-check utility to used to verify environment variables. NOTE: the options listed by the app are but a small subset of what is available at any given time. However, the items listed are of particular interest to JTSDK-Tools . There are no command line options for JTEnv-jv . Run the application as indicated below. NOTE: If you have Java and Java Tools installed, the make install will compile the app for you and place it where it needs to be. # Run from JTSDK-Tools Environment via DOSKEY jtenv-j # Run From Windows Command Prompt: java -cp (C|D):\\JTSDK-Tools\\scripts\\java JTEnv-jv","title":"jtenvjv"},{"location":"tools/jtenvjv/#environment-using-java","text":"Application Data Name jtenvjv Version 3.0.1 Arch 64 bit preferred Java Version 8, 9, 10 Status Release Description Java application to list environment variables","title":"Environment Using Java"},{"location":"tools/jtenvjv/#compiling","text":"No external libraries are required to build the app. Runs on Java 8, 9 and 10 # In Window command prompt, or JTSDK-Tools Environment (C|D):\\JTSDK-Tools\\scripts\\java # Compile javac JTEnv-jv.java # Run java JTEnv-jv -h","title":"Compiling"},{"location":"tools/jtenvjv/#usage","text":"JTEnv-jv is a quick-check utility to used to verify environment variables. NOTE: the options listed by the app are but a small subset of what is available at any given time. However, the items listed are of particular interest to JTSDK-Tools . There are no command line options for JTEnv-jv . Run the application as indicated below. NOTE: If you have Java and Java Tools installed, the make install will compile the app for you and place it where it needs to be. # Run from JTSDK-Tools Environment via DOSKEY jtenv-j # Run From Windows Command Prompt: java -cp (C|D):\\JTSDK-Tools\\scripts\\java JTEnv-jv","title":"Usage"},{"location":"tools/jtenvpy/","text":"Environment Using Python \u00b6 Application Data Package jtenv Version 3.0.14 Topic Communications, Ham Radio Development Status 2 - Beta Distributions Windows, Linux, MacOS Arch Any (x86-64 recommended) Python Version >= 3.5 Dependencies Standard Python Library Virtual Environment Anaconda Python 2018.12 Description Python application to list environment variables Development Status \u00b6 This package is in Beta . The package was tested using Anaconda Python 2018.12 with a default virtual environment creation e.g. ( conda create -n jtsdk-py ). Description \u00b6 Simple Python script to print various environment variables associated with JTSDK-Tools Requirements \u00b6 If running JTSDK-Tools , install Install Anaconda Python if you've not done so. Any Python version >= 3.5, virtual or native installation No special modules or distributions are required. Installation \u00b6 During Beta testing, installation will pull yhe application from test.pypi.org . After Beta testing, the package will be moved to the main PyPi repository where it will remain. Open a condole, and type the following: # If using JTSDK-Tools, active jtsdk-py first conda activate jtsdk-py # Install command: note the space after trailing / pip install -i https://test.pypi.org/simple/ jtenv Usage \u00b6 Provides: 1. Sets up application directories based on Windows, Linux, or Darwin FSH 2. Prints Java, User, System, and JTSDK Environment variables usage: jtenv [-h] [-a] [-j] [-s] [-S] [-u] [-z] [-v] Print Environment Variables optional arguments: -h, --help show this help message and exit -a, --all List all variables -j, --java Java related variables -s, --system System variables and exit -S, --setup Creates JTSDK-Tools folders -u, --user User variables and exit -z, --jtsdk JTSDK-Tools variables -v, --version The application version number Uninstall \u00b6 Open a condole, and type the following: # If using JTSDK-Tools, active jtsdk-py first conda activate jtsdk-py # Uninstall command pip uninstall jtenv","title":"jtenvpy"},{"location":"tools/jtenvpy/#environment-using-python","text":"Application Data Package jtenv Version 3.0.14 Topic Communications, Ham Radio Development Status 2 - Beta Distributions Windows, Linux, MacOS Arch Any (x86-64 recommended) Python Version >= 3.5 Dependencies Standard Python Library Virtual Environment Anaconda Python 2018.12 Description Python application to list environment variables","title":"Environment Using Python"},{"location":"tools/jtenvpy/#development-status","text":"This package is in Beta . The package was tested using Anaconda Python 2018.12 with a default virtual environment creation e.g. ( conda create -n jtsdk-py ).","title":"Development Status"},{"location":"tools/jtenvpy/#description","text":"Simple Python script to print various environment variables associated with JTSDK-Tools","title":"Description"},{"location":"tools/jtenvpy/#requirements","text":"If running JTSDK-Tools , install Install Anaconda Python if you've not done so. Any Python version >= 3.5, virtual or native installation No special modules or distributions are required.","title":"Requirements"},{"location":"tools/jtenvpy/#installation","text":"During Beta testing, installation will pull yhe application from test.pypi.org . After Beta testing, the package will be moved to the main PyPi repository where it will remain. Open a condole, and type the following: # If using JTSDK-Tools, active jtsdk-py first conda activate jtsdk-py # Install command: note the space after trailing / pip install -i https://test.pypi.org/simple/ jtenv","title":"Installation"},{"location":"tools/jtenvpy/#usage","text":"Provides: 1. Sets up application directories based on Windows, Linux, or Darwin FSH 2. Prints Java, User, System, and JTSDK Environment variables usage: jtenv [-h] [-a] [-j] [-s] [-S] [-u] [-z] [-v] Print Environment Variables optional arguments: -h, --help show this help message and exit -a, --all List all variables -j, --java Java related variables -s, --system System variables and exit -S, --setup Creates JTSDK-Tools folders -u, --user User variables and exit -z, --jtsdk JTSDK-Tools variables -v, --version The application version number","title":"Usage"},{"location":"tools/jtenvpy/#uninstall","text":"Open a condole, and type the following: # If using JTSDK-Tools, active jtsdk-py first conda activate jtsdk-py # Uninstall command pip uninstall jtenv","title":"Uninstall"},{"location":"tools/wsprcsv/","text":"WSPR CSV Conversion Utility \u00b6 Application Data Package wsprcsv Version 3.0.14 Topic Science/Research, Utilities Development Status 4 - Beta Compatibility Windows, Linux, MacOS Arch Any (x86-64 recommended) Python Version >= 3.5 Dependencies Pandas Virtual Environment Anaconda Python 2018.12 ---- About Anaconda Python \u00b6 Anaconda Python is a free, easy-to-install, package manager, environment manager and Python distribution with a collection of 1,000+ open source packages with free community support. Anaconda is platform-agnostic, so you can use it whether you are on Windows, MacOS or Linux. -- Anaconda, Inc., www.anaconda.com About Pandas \u00b6 pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. pandas is a NumFOCUS sponsored project. This will help ensure the success of development of pandas as a world-class open-source project, and makes it possible to donate to the project. -- The Pandas Project Development Status \u00b6 This package is in Beta . The package was tested using Anaconda Python 2018.12 with a default virtual environment creation e.g. ( conda create -n jtsdk-py ). Description \u00b6 wsprcsv is a collection of Python scripts used to manage WSPR data-files using Pandas . It takes an original WSPR Spots CSV and converts Epoch times to Date and Time columns, then removes Spot_Id and epoch timestamp columns. On smaller files (100K to 500K rows), it could be argued that looping through the files with native Python functions could be faster. However, when processing 40+ Million Rows , Pandas is your friend. Example Two below is the most resent full-month archive from WSPRnet . Processing was intense to say the least: Requirements \u00b6 The following are the minimal requirements to run wsprcsv . System running Python(3) , preferably in a Virtual Environment Python Pandas Multi-Core CPU At least 2GB free memory, more is preferable 5 GB Free disk space minimum If you use Anaconda Python 2018.12 , creating a basic environment satisfies all the package needs. By default, Pandas is part of a default env install. Installation \u00b6 Installing wsprcsv from a package is, by far, the easiest and fastest way to get up running. NOTE: This process is only valid for pre-releases versions of wsprcsv . Once formally released, you will not need to specify the URL at. # If using JTSDK-Tools, activate jtsdk-py conda activate jtsdk-py # Otherwise, create a Python Virtual Environment for testing: conda create -n wsprcsv conda activate wsprcsv # Install wsprcsv package pip install -i https://test.pypi.org/simple/ wsprcsv Validate Installation \u00b6 In the same terminal, verify wsprcsv is functional. # In the terminal type wsprcsv -h # You should see the following. (wsprcsv) is the Python Virtual Environment # I created used for this with installation test run. (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp >wsprcsv -h usage: wsprcsv [-h] -n NAME -s SRCD -c CSVD Pandas script to convert WSPRnet CSV files optional arguments: -h, --help show this help message and exit -n NAME, --name NAME name of file to convert -s SRCD, --srcd SRCD source directory of the file -c CSVD, --csvd CSVD output directory for file (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp > Example Usage \u00b6 The location for the source and output directories is up to the user. I used JTSDK-Tools Env for the example(s) after having created a Virtual Environment named wpsrcsv . Download Source CSV \u00b6 I used wsprspots-2009-01.csv.zip for the first example, however, you can use any file you like from the Download Page . IMPORTANT: If you are using Windows, download a *.zip file. Linux or Unix based platforms, pick a *.gz file. CAUTION: The newer the file, the longer the conversion process will take. 2009-01 comes in at 1.5 minutes >where 2018-12 takes 20 minutes and has ~40+ Million rows . NOTE: I find it easier to set variables for each of the three elements, but, you can type them is is desired. Also, using variables allows you too loop through several archive files at once using a separate script that calls as wsprcsv as a conversion utility. In the same Virtual Environment as the installation, run the following commands: # Set the input variables (change the names and paths to meet your needs). # You can enter the commands directly with --csvd and --srcd options. # I elected to use variables. # Win32|64 set name=wsprspots-2009-01.csv.zip set srcd=D:\\JTSDK-Tool\\tmp set csvd=D:\\JTSDK-Tools\\tmp # Linux name=\"wsprspots-2009-01.csv.zip\" srcd=\"$HOME/tmp\" csvd=\"$HOME/tmp\" # Run the wsprcsv command # Windows wsprcsv -n %name% -s %srcd% -c %csvd% # Linux wsprcsv -n $name -s $srcd -c $csvd Set Process Variables \u00b6 # Commands, as typed in Windows JTSDK-Tools Env. set name=wsprspots-2009-01.csv.zip set srcd=D:\\JTSDK-Tools\\tmp set csvd=D:\\JTSDK-Tools\\tmp wsprcsv -n %name% -s %srcd% -c %csvd% Conversion Results \u00b6 If all went as expected, you should see the following results. ---------------------------------------- CSV Conversion using Pandas ---------------------------------------- DATA In-File ...: D:\\JTSDK-Tools\\tmp\\wsprspots-2009-01.csv.zip Out-File ..: D:\\JTSDK-Tools\\tmp\\df-wsprspots-2009-01.csv ACTIONS * Import CSV * Convert Date * Convert Time * Re-Index Dataframe * Generate DF-CSV STATS * CSV File Size ....: 7.14 MB * DF-CSV File Size .: 50.14 MB * Import ...........: 2.63 sec * Convert Date .....: 3.27 sec * Convert Time .....: 2.95 sec * Re-Index .........: 0.14 sec * Generate DF-CSV ..: 5.51 sec * Row Count ........: 577,169 ---------------------------------------- Total Time : 14.569 sec Dataframe (first 5 rows) date time rptr rgrid snr freq call grid pwr drift dist az band ver code 0 2009-01-01 0000 RA6AS KN93vn 6 10.140166 DL6NL JO50cb 20 0 2347 97 10 1.1_r1042 0 1 2009-01-01 0000 W3HH EL89vb -27 10.140166 DL6NL JO50cb 20 0 7738 291 10 1.01_r1023 0 2 2009-01-01 0000 PA3GYK JO21qq -21 10.140130 EA1FAQ IN71op 27 0 1357 31 10 1.01_r1023 0 3 2009-01-01 0000 PD4U JO22xe -11 7.040029 EA1FAQ IN71op 27 0 1425 31 7 1.01_r1023 0 4 2009-01-01 0000 VK6DI OF88cd -26 10.140177 JE5FLM PM74ah 37 1 7590 196 10 1.01_r1023 0 (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp > Conversion Results Two \u00b6 This set of results is from the latest full-month archive ( 2018-12 ). It boasts a staggering 43+ Million Rows . ---------------------------------------- CSV Conversion using Pandas ---------------------------------------- DATA In-File ...: D:\\JTSDK-Tools\\tmp\\wsprspots-2018-12.csv.zip Out-File ..: D:\\JTSDK-Tools\\tmp\\df-wsprspots-2018-12.csv ACTIONS * Import CSV * Convert Date * Convert Time * Re-Index Dataframe * Generate DF-CSV STATS * CSV File Size ....: 820.52 MB * DF-CSV File Size .: 3,642.12 MB * Import ...........: 214.58 sec * Convert Date .....: 279.73 sec * Convert Time .....: 243.00 sec * Re-Index .........: 55.26 sec * Generate DF-CSV ..: 449.30 sec * Row Count ........: 43,804,393 ---------------------------------------- Total Time : 1285.742 sec Dataframe (first 5 rows) date time rptr rgrid snr freq call grid pwr drift dist az band ver code 0 2018-12-01 0000 2E0ILY/15 IO82qv -9 0.13762 DK7FC JN49ik 30 0 878 300 -1 0.8_r3058 0 1 2018-12-01 0000 DF2IC JN49jo 2 0.13762 DK7FC JN49ik 30 0 19 18 -1 0.8_r3058 0 2 2018-12-01 0000 DF6NM JN59nj 3 0.13762 DK7FC JN49ik 30 0 175 91 -1 0.8_r3058 0 3 2018-12-01 0000 DK7FC/15 JN49ik 11 0.13762 DK7FC JN49ik 30 0 0 0 -1 0.8_r3058 0 4 2018-12-01 0000 DL0AO/15 JN59vk 3 0.13762 DK7FC JN49ik 30 0 223 89 -1 0.8_r3058 0 (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp > Uninstall \u00b6 To uninstall the script, remembering to use the same Virtual Environment, type the following: # Windows and Linux make uninstall That should do it. Thanks for testing the script. Be sure to check back often as additional features will be added to enhance the current capability.","title":"wsprcsv"},{"location":"tools/wsprcsv/#wspr-csv-conversion-utility","text":"Application Data Package wsprcsv Version 3.0.14 Topic Science/Research, Utilities Development Status 4 - Beta Compatibility Windows, Linux, MacOS Arch Any (x86-64 recommended) Python Version >= 3.5 Dependencies Pandas Virtual Environment Anaconda Python 2018.12 ----","title":"WSPR CSV Conversion Utility"},{"location":"tools/wsprcsv/#about-anaconda-python","text":"Anaconda Python is a free, easy-to-install, package manager, environment manager and Python distribution with a collection of 1,000+ open source packages with free community support. Anaconda is platform-agnostic, so you can use it whether you are on Windows, MacOS or Linux. -- Anaconda, Inc., www.anaconda.com","title":"About Anaconda Python"},{"location":"tools/wsprcsv/#about-pandas","text":"pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. pandas is a NumFOCUS sponsored project. This will help ensure the success of development of pandas as a world-class open-source project, and makes it possible to donate to the project. -- The Pandas Project","title":"About Pandas"},{"location":"tools/wsprcsv/#development-status","text":"This package is in Beta . The package was tested using Anaconda Python 2018.12 with a default virtual environment creation e.g. ( conda create -n jtsdk-py ).","title":"Development Status"},{"location":"tools/wsprcsv/#description","text":"wsprcsv is a collection of Python scripts used to manage WSPR data-files using Pandas . It takes an original WSPR Spots CSV and converts Epoch times to Date and Time columns, then removes Spot_Id and epoch timestamp columns. On smaller files (100K to 500K rows), it could be argued that looping through the files with native Python functions could be faster. However, when processing 40+ Million Rows , Pandas is your friend. Example Two below is the most resent full-month archive from WSPRnet . Processing was intense to say the least:","title":"Description"},{"location":"tools/wsprcsv/#requirements","text":"The following are the minimal requirements to run wsprcsv . System running Python(3) , preferably in a Virtual Environment Python Pandas Multi-Core CPU At least 2GB free memory, more is preferable 5 GB Free disk space minimum If you use Anaconda Python 2018.12 , creating a basic environment satisfies all the package needs. By default, Pandas is part of a default env install.","title":"Requirements"},{"location":"tools/wsprcsv/#installation","text":"Installing wsprcsv from a package is, by far, the easiest and fastest way to get up running. NOTE: This process is only valid for pre-releases versions of wsprcsv . Once formally released, you will not need to specify the URL at. # If using JTSDK-Tools, activate jtsdk-py conda activate jtsdk-py # Otherwise, create a Python Virtual Environment for testing: conda create -n wsprcsv conda activate wsprcsv # Install wsprcsv package pip install -i https://test.pypi.org/simple/ wsprcsv","title":"Installation"},{"location":"tools/wsprcsv/#validate-installation","text":"In the same terminal, verify wsprcsv is functional. # In the terminal type wsprcsv -h # You should see the following. (wsprcsv) is the Python Virtual Environment # I created used for this with installation test run. (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp >wsprcsv -h usage: wsprcsv [-h] -n NAME -s SRCD -c CSVD Pandas script to convert WSPRnet CSV files optional arguments: -h, --help show this help message and exit -n NAME, --name NAME name of file to convert -s SRCD, --srcd SRCD source directory of the file -c CSVD, --csvd CSVD output directory for file (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp >","title":"Validate Installation"},{"location":"tools/wsprcsv/#example-usage","text":"The location for the source and output directories is up to the user. I used JTSDK-Tools Env for the example(s) after having created a Virtual Environment named wpsrcsv .","title":"Example Usage"},{"location":"tools/wsprcsv/#download-source-csv","text":"I used wsprspots-2009-01.csv.zip for the first example, however, you can use any file you like from the Download Page . IMPORTANT: If you are using Windows, download a *.zip file. Linux or Unix based platforms, pick a *.gz file. CAUTION: The newer the file, the longer the conversion process will take. 2009-01 comes in at 1.5 minutes >where 2018-12 takes 20 minutes and has ~40+ Million rows . NOTE: I find it easier to set variables for each of the three elements, but, you can type them is is desired. Also, using variables allows you too loop through several archive files at once using a separate script that calls as wsprcsv as a conversion utility. In the same Virtual Environment as the installation, run the following commands: # Set the input variables (change the names and paths to meet your needs). # You can enter the commands directly with --csvd and --srcd options. # I elected to use variables. # Win32|64 set name=wsprspots-2009-01.csv.zip set srcd=D:\\JTSDK-Tool\\tmp set csvd=D:\\JTSDK-Tools\\tmp # Linux name=\"wsprspots-2009-01.csv.zip\" srcd=\"$HOME/tmp\" csvd=\"$HOME/tmp\" # Run the wsprcsv command # Windows wsprcsv -n %name% -s %srcd% -c %csvd% # Linux wsprcsv -n $name -s $srcd -c $csvd","title":"Download Source CSV"},{"location":"tools/wsprcsv/#set-process-variables","text":"# Commands, as typed in Windows JTSDK-Tools Env. set name=wsprspots-2009-01.csv.zip set srcd=D:\\JTSDK-Tools\\tmp set csvd=D:\\JTSDK-Tools\\tmp wsprcsv -n %name% -s %srcd% -c %csvd%","title":"Set Process Variables"},{"location":"tools/wsprcsv/#conversion-results","text":"If all went as expected, you should see the following results. ---------------------------------------- CSV Conversion using Pandas ---------------------------------------- DATA In-File ...: D:\\JTSDK-Tools\\tmp\\wsprspots-2009-01.csv.zip Out-File ..: D:\\JTSDK-Tools\\tmp\\df-wsprspots-2009-01.csv ACTIONS * Import CSV * Convert Date * Convert Time * Re-Index Dataframe * Generate DF-CSV STATS * CSV File Size ....: 7.14 MB * DF-CSV File Size .: 50.14 MB * Import ...........: 2.63 sec * Convert Date .....: 3.27 sec * Convert Time .....: 2.95 sec * Re-Index .........: 0.14 sec * Generate DF-CSV ..: 5.51 sec * Row Count ........: 577,169 ---------------------------------------- Total Time : 14.569 sec Dataframe (first 5 rows) date time rptr rgrid snr freq call grid pwr drift dist az band ver code 0 2009-01-01 0000 RA6AS KN93vn 6 10.140166 DL6NL JO50cb 20 0 2347 97 10 1.1_r1042 0 1 2009-01-01 0000 W3HH EL89vb -27 10.140166 DL6NL JO50cb 20 0 7738 291 10 1.01_r1023 0 2 2009-01-01 0000 PA3GYK JO21qq -21 10.140130 EA1FAQ IN71op 27 0 1357 31 10 1.01_r1023 0 3 2009-01-01 0000 PD4U JO22xe -11 7.040029 EA1FAQ IN71op 27 0 1425 31 7 1.01_r1023 0 4 2009-01-01 0000 VK6DI OF88cd -26 10.140177 JE5FLM PM74ah 37 1 7590 196 10 1.01_r1023 0 (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp >","title":"Conversion Results"},{"location":"tools/wsprcsv/#conversion-results-two","text":"This set of results is from the latest full-month archive ( 2018-12 ). It boasts a staggering 43+ Million Rows . ---------------------------------------- CSV Conversion using Pandas ---------------------------------------- DATA In-File ...: D:\\JTSDK-Tools\\tmp\\wsprspots-2018-12.csv.zip Out-File ..: D:\\JTSDK-Tools\\tmp\\df-wsprspots-2018-12.csv ACTIONS * Import CSV * Convert Date * Convert Time * Re-Index Dataframe * Generate DF-CSV STATS * CSV File Size ....: 820.52 MB * DF-CSV File Size .: 3,642.12 MB * Import ...........: 214.58 sec * Convert Date .....: 279.73 sec * Convert Time .....: 243.00 sec * Re-Index .........: 55.26 sec * Generate DF-CSV ..: 449.30 sec * Row Count ........: 43,804,393 ---------------------------------------- Total Time : 1285.742 sec Dataframe (first 5 rows) date time rptr rgrid snr freq call grid pwr drift dist az band ver code 0 2018-12-01 0000 2E0ILY/15 IO82qv -9 0.13762 DK7FC JN49ik 30 0 878 300 -1 0.8_r3058 0 1 2018-12-01 0000 DF2IC JN49jo 2 0.13762 DK7FC JN49ik 30 0 19 18 -1 0.8_r3058 0 2 2018-12-01 0000 DF6NM JN59nj 3 0.13762 DK7FC JN49ik 30 0 175 91 -1 0.8_r3058 0 3 2018-12-01 0000 DK7FC/15 JN49ik 11 0.13762 DK7FC JN49ik 30 0 0 0 -1 0.8_r3058 0 4 2018-12-01 0000 DL0AO/15 JN59vk 3 0.13762 DK7FC JN49ik 30 0 223 89 -1 0.8_r3058 0 (wsprcsv) (QT-5.5) d:\\JTSDK-Tools\\tmp >","title":"Conversion Results Two"},{"location":"tools/wsprcsv/#uninstall","text":"To uninstall the script, remembering to use the same Virtual Environment, type the following: # Windows and Linux make uninstall That should do it. Thanks for testing the script. Be sure to check back often as additional features will be added to enhance the current capability.","title":"Uninstall"},{"location":"user-guide/User-Guide-3.0.2/","text":"JTSDK Tools User Guide \u00b6 Application Data Release Notes Version 3.0.2 Overview \u00b6 The following is a brief overview of the applications, and functionality available in JTSDK-Tool v3.0.2 . Application Description jtenv Checks Environment Information jtconfig Manages all JTSDK Options and used in compiling. jtbuild Manages all JTSDK Options and used in compiling. The following tools / application are optional and require additional tooling to be installed before use. Optional Tools Description jtenv-jv Java Version for Checking Environment Information jtenv-py Python Version for Checking Environment Information NOTE: jtenv , jtenv-jv , and jtenv-py all perform the same task, but use different frameworks. There is \"NO\" requirement for either the Java or Python version, as the jtenv (CSharp version) is installed by default. JTConfig \u00b6 jtconfig is primary application for configuring build options for compiling WSJT-X through the use of jtbuild . Use the help-options to list available commands # To list available commands jtconfig -h Help Screen Recommended Options \u00b6 For ease of use, a default option command is available that will set standard options for you. Configuration Options \u00b6 Configuration Options JTEnv \u00b6 jtenv is used to check a number of environmental variables that can be helpful in troubleshooting the installation, or to simply provide additional information to the user. # To list available commands jtenv -h Help Screen JTBuildcm \u00b6 For building WSJT-X , See: jtbuildcm page for usage. JTEnv Python \u00b6 For using the jtenvpy environment script, See: jtenvpy for details. WSPR Utility \u00b6 For using the wsprcsv conversion utility, See: wsprcsv for details.","title":"User Guide"},{"location":"user-guide/User-Guide-3.0.2/#jtsdk-tools-user-guide","text":"Application Data Release Notes Version 3.0.2","title":"JTSDK Tools User Guide"},{"location":"user-guide/User-Guide-3.0.2/#overview","text":"The following is a brief overview of the applications, and functionality available in JTSDK-Tool v3.0.2 . Application Description jtenv Checks Environment Information jtconfig Manages all JTSDK Options and used in compiling. jtbuild Manages all JTSDK Options and used in compiling. The following tools / application are optional and require additional tooling to be installed before use. Optional Tools Description jtenv-jv Java Version for Checking Environment Information jtenv-py Python Version for Checking Environment Information NOTE: jtenv , jtenv-jv , and jtenv-py all perform the same task, but use different frameworks. There is \"NO\" requirement for either the Java or Python version, as the jtenv (CSharp version) is installed by default.","title":"Overview"},{"location":"user-guide/User-Guide-3.0.2/#jtconfig","text":"jtconfig is primary application for configuring build options for compiling WSJT-X through the use of jtbuild . Use the help-options to list available commands # To list available commands jtconfig -h Help Screen","title":"JTConfig"},{"location":"user-guide/User-Guide-3.0.2/#recommended-options","text":"For ease of use, a default option command is available that will set standard options for you.","title":"Recommended Options"},{"location":"user-guide/User-Guide-3.0.2/#configuration-options","text":"Configuration Options","title":"Configuration Options"},{"location":"user-guide/User-Guide-3.0.2/#jtenv","text":"jtenv is used to check a number of environmental variables that can be helpful in troubleshooting the installation, or to simply provide additional information to the user. # To list available commands jtenv -h Help Screen","title":"JTEnv"},{"location":"user-guide/User-Guide-3.0.2/#jtbuildcm","text":"For building WSJT-X , See: jtbuildcm page for usage.","title":"JTBuildcm"},{"location":"user-guide/User-Guide-3.0.2/#jtenv-python","text":"For using the jtenvpy environment script, See: jtenvpy for details.","title":"JTEnv Python"},{"location":"user-guide/User-Guide-3.0.2/#wspr-utility","text":"For using the wsprcsv conversion utility, See: wsprcsv for details.","title":"WSPR Utility"},{"location":"windows/Home/","text":"JTSDK Tools Windows Installation \u00b6 NOTE: This document is still Under Development , and may be subject to frequent updates. Hard linking to specific URL's is not advised at this time. To prevent unexpected issues, the installation order below should be firmly adhered to. Prerequisite Installation \u00b6 While not critical, the following packages should be installed in the order listed to prevent unexpected results. See Prerequisite Overview for further details. Net Core SDK VS Code Git Client Required Installation and Configuration \u00b6 MSYS2 is the last of the required installation and configuration sections. It follows the Core Apps Install guide as several scripts--most notably, the Hamlib Build script--are part of this package. The Core Apps Install package also provides the MSYS2 dependency list which users will need to install MSYS2 required dependencies. Python Core Tools AsciiDoctor Configuration Qt Tools Core Apps MSYS2 Configuration Optional Installs \u00b6 Database Tools (non-PostgreSQL) Doc Tools Java Tools Java PostgreSQL Redis WSL Misc Tools - under development Sections \u00b6 NOTE: This section is under constant revision. As framework needs arise, they will be placed both in the side-bar and list here. Overview Net Core Usage Language and Syntax Setting JTSDK_HOME Variable Individual Guides Choosing 64-bit or 32-bit System Level Installation Third Party Installers Tool Chain Matrix Prerequisite Tools Core Tools Documentation Tools Database Tools Python Tools Java Tools Miscellaneous Tools General Overview \u00b6 JTSDK Tools Version 3 is broken down into three primary install groups: Prerequisite Tools Core Tools JTSDK Net Core Package In addition to the required tools and frameworks, there are a number of additional components the JTSDK Tools Environment will be supporting: Python Tools Java Tools Database Tools Miscellaneous Tools While not absolute, the order of installation an configuration should be followed to prevent missing critical steps, or, missing out on a particular feature from another installation process. Net Core Usage \u00b6 At present, Net Core Applications are only used in setting environment , paths and configuration variable. Its the long term goal to convert all Bash and Windows Batch/CMD scripts over to Net Core . Language and Syntax \u00b6 Throughout this guide you will often see the use of (C|D):\\JTSDK-Tools or reference to JTSDK_HOME The syntax (C|D) referes to the drive letter, either C-Drive C: or D-Drive D: . In either case, \\JTSDK-Tools will follow the drive letter. JTSDK_HOME referes to the locaiton where JTSDK-Tools has been installed, for example: # C-Drive Installation JTSDK_HOME = C:\\JTSDK-Tools # D-Drive Installation JTSDK_HOME = D:\\JTSDK-Tools Setting JTSDK_HOME Variable \u00b6 On several occasions, you will be required to set JTSDK_HOME temporarily. The following shows how to do this for either (C|D) installation locations. # To temporarily set the JTSDK_HOME variable inside a Windows Console # C-Drive Installation set JTSDK_HOME=C:\\JTSDK-Tools # D-Drive Installation set JTSDK_HOME=D:\\JTSDK-Tools The same would be true, and follows the same syntax if: The system has several (more than two) physical hard drives. The system has multiple Windows partitions on a single drive. Setting JTSDK_HOME in a Windows Console Manually will NOT retain the setting if the current console is closed. Likewise, if you have two consoles open, setting the variable in Console-1 will NOT make the variable known too nor available in Console-2. Individual Guides \u00b6 Each activity in regards to installation or configuration has its own guide. Every effort has been made to make each guide informative, yet direct and to the point. The guides are NOT intended to be a tutorial covering the the subject area. Most tools have extensive documentation by the original authors, often located within the applicaiton folder structure. Choosing 64-bit or 32-bit \u00b6 For the most part, any tool that is used to compile--either in-part or whole-- WSJT applications should be 32-bit on Windows. Tools such as Git, Dotnet, 7-Zip, RapidEE, and others, can be 64-bit as they are tools to help users with non-compiling tasks. Each guide will have the Required arch-type and indicate whether it is acceptable to use 64-bit or not. System Level Installation \u00b6 The JTSDK Tool Chain requires thhree packages to be installed at the System Level: For 32-bit C:\\Program Files (x86) For 64-bit C:\\Program Files If the application in question is not installed to the Windows default system installation location, they must be added to the System or User path variables. In either case, the applications must be available when opening a non-privileged Windows Console. Many application installers use the system folders by default. However, there are no guarantees, and users should verify the location for any System Level application requirement. Third Party Installers \u00b6 One or more of the tool chain components may be provided by Third Party Installers. Users should always check for the latest version of the respective installer before installation unless advised otherwise. Tool Chain Matrix \u00b6 The Tool Chain Matrix(s) provides a brief description and links to each application or framework used within JTSDK-Tools . Installation , Configuration and Removal will be outlined in each of the respective application or framework documents as appropriate. Collections such as MSYS2 include many GNU Core Utils that are not outlined specifically in this document. For more information a given item, following the links provided. Prerequisite Tools \u00b6 In order to checkout and compile the JTSDK Net Core Package , users must have three applications installed at the system level . See Prereq Install Instructions for details. Application Purpose Microsoft Net Core SDK Cross Platform Framework based on C-Charp Visual Studio Code Powerful Cross-Platform Editor Git Client Distributed Version Control System Client Core Tools \u00b6 The following tools are required and comprise the Core Tool Chain . All of the tools in this group are required to buolw WSJT-X , and should be considered the bare minimum installation. Application Purpose Asciidoctor General purpose documeatation system based on Ruby CMake Cross-Platform tools to build, test and deploy software FFTW Subroutine library for computing the discrete Fourier transform (DFT) in one or more dimensions InnoSetup Install and build system for Windows applications Libusb C-Library providing access to USB devices on Windows MSYS2 A collection of GNU Tools for Windows with Pacman package manager NSIS Professional open source system to create Windows installers Nuget NuGet is the package manager for .NET PKG-Config Package Config built for Windows Qt Cross-Platform Development Framework Ruby Open source programming language Subversion Cross-Platform Version Control System Documentation Tools \u00b6 The following Document utilities can be installed in addition to the JTSDK Core Tool Chain See Install Doc Tools for details. Application Purpose AsciiDOc The predecessor to Asciidoctor (Python based) DocFX Generates documentation directly from source code Pandoc Cross-Platform document conversion utility Database Tools \u00b6 The following tools are general purpose database applications and / or servers. See Install-PostgreSQL , and Install-DB-Tools for details. PostgreSQL is a stand-alone guide, where as SQLite3 is a simply installed from the Install-DB-Tools Guide . As more database tools are added, and provided they do not need a stand alone guide, they will be added to the Install-DB-Tools installer. Application Purpose PostgreSQL Advanced High Performance Relational Database Sqlite A powerful In-Process SQL Database Engine Python Tools \u00b6 The following Python Tools can be installed in addition to the JTSDK Core Tool Chain . See Install Python for details. Application Purpose Anaconda Python Python data science platform Java Tools \u00b6 The following tools are generally related to Java and associated build activities. While applications such as Gradle and Eclipse may very well apply to other programming languages, they are most commonly used in Java related application development. See Install Java , and Install Java Tools for more details. Application Purpose Java Cross-Platform Programming Language Ant Java Library, and CLI tools, for building Java Apps from the Apache Foundation Eclipse Cross-Platform IDE primarily for Java Application Development Gradle Cross-Platform tools for building and deploying applications Maven Build System from the Apache Foundation Miscellaneous \u00b6 The following tools can be installed in addition to the JTSDK Core Tool Chain . See Miscellaneous Tools Install Instructions for details. Application Purpose RapidEE Rapid Environment Editor (RapidEE) is an environment variables editor. Visual Studio Fully-featured integrated development environment (IDE) for Android, iOS, Windows, web, and cloud Others More to follow","title":"Overview"},{"location":"windows/Home/#jtsdk-tools-windows-installation","text":"NOTE: This document is still Under Development , and may be subject to frequent updates. Hard linking to specific URL's is not advised at this time. To prevent unexpected issues, the installation order below should be firmly adhered to.","title":"JTSDK Tools Windows Installation"},{"location":"windows/Home/#prerequisite-installation","text":"While not critical, the following packages should be installed in the order listed to prevent unexpected results. See Prerequisite Overview for further details. Net Core SDK VS Code Git Client","title":"Prerequisite Installation"},{"location":"windows/Home/#required-installation-and-configuration","text":"MSYS2 is the last of the required installation and configuration sections. It follows the Core Apps Install guide as several scripts--most notably, the Hamlib Build script--are part of this package. The Core Apps Install package also provides the MSYS2 dependency list which users will need to install MSYS2 required dependencies. Python Core Tools AsciiDoctor Configuration Qt Tools Core Apps MSYS2 Configuration","title":"Required Installation and Configuration"},{"location":"windows/Home/#optional-installs","text":"Database Tools (non-PostgreSQL) Doc Tools Java Tools Java PostgreSQL Redis WSL Misc Tools - under development","title":"Optional Installs"},{"location":"windows/Home/#sections","text":"NOTE: This section is under constant revision. As framework needs arise, they will be placed both in the side-bar and list here. Overview Net Core Usage Language and Syntax Setting JTSDK_HOME Variable Individual Guides Choosing 64-bit or 32-bit System Level Installation Third Party Installers Tool Chain Matrix Prerequisite Tools Core Tools Documentation Tools Database Tools Python Tools Java Tools Miscellaneous Tools","title":"Sections"},{"location":"windows/Home/#general-overview","text":"JTSDK Tools Version 3 is broken down into three primary install groups: Prerequisite Tools Core Tools JTSDK Net Core Package In addition to the required tools and frameworks, there are a number of additional components the JTSDK Tools Environment will be supporting: Python Tools Java Tools Database Tools Miscellaneous Tools While not absolute, the order of installation an configuration should be followed to prevent missing critical steps, or, missing out on a particular feature from another installation process.","title":"General Overview"},{"location":"windows/Home/#net-core-usage","text":"At present, Net Core Applications are only used in setting environment , paths and configuration variable. Its the long term goal to convert all Bash and Windows Batch/CMD scripts over to Net Core .","title":"Net Core Usage"},{"location":"windows/Home/#language-and-syntax","text":"Throughout this guide you will often see the use of (C|D):\\JTSDK-Tools or reference to JTSDK_HOME The syntax (C|D) referes to the drive letter, either C-Drive C: or D-Drive D: . In either case, \\JTSDK-Tools will follow the drive letter. JTSDK_HOME referes to the locaiton where JTSDK-Tools has been installed, for example: # C-Drive Installation JTSDK_HOME = C:\\JTSDK-Tools # D-Drive Installation JTSDK_HOME = D:\\JTSDK-Tools","title":"Language and Syntax"},{"location":"windows/Home/#setting-jtsdk_home-variable","text":"On several occasions, you will be required to set JTSDK_HOME temporarily. The following shows how to do this for either (C|D) installation locations. # To temporarily set the JTSDK_HOME variable inside a Windows Console # C-Drive Installation set JTSDK_HOME=C:\\JTSDK-Tools # D-Drive Installation set JTSDK_HOME=D:\\JTSDK-Tools The same would be true, and follows the same syntax if: The system has several (more than two) physical hard drives. The system has multiple Windows partitions on a single drive. Setting JTSDK_HOME in a Windows Console Manually will NOT retain the setting if the current console is closed. Likewise, if you have two consoles open, setting the variable in Console-1 will NOT make the variable known too nor available in Console-2.","title":"Setting JTSDK_HOME Variable"},{"location":"windows/Home/#individual-guides","text":"Each activity in regards to installation or configuration has its own guide. Every effort has been made to make each guide informative, yet direct and to the point. The guides are NOT intended to be a tutorial covering the the subject area. Most tools have extensive documentation by the original authors, often located within the applicaiton folder structure.","title":"Individual Guides"},{"location":"windows/Home/#choosing-64-bit-or-32-bit","text":"For the most part, any tool that is used to compile--either in-part or whole-- WSJT applications should be 32-bit on Windows. Tools such as Git, Dotnet, 7-Zip, RapidEE, and others, can be 64-bit as they are tools to help users with non-compiling tasks. Each guide will have the Required arch-type and indicate whether it is acceptable to use 64-bit or not.","title":"Choosing 64-bit or 32-bit"},{"location":"windows/Home/#system-level-installation","text":"The JTSDK Tool Chain requires thhree packages to be installed at the System Level: For 32-bit C:\\Program Files (x86) For 64-bit C:\\Program Files If the application in question is not installed to the Windows default system installation location, they must be added to the System or User path variables. In either case, the applications must be available when opening a non-privileged Windows Console. Many application installers use the system folders by default. However, there are no guarantees, and users should verify the location for any System Level application requirement.","title":"System Level Installation"},{"location":"windows/Home/#third-party-installers","text":"One or more of the tool chain components may be provided by Third Party Installers. Users should always check for the latest version of the respective installer before installation unless advised otherwise.","title":"Third Party Installers"},{"location":"windows/Home/#tool-chain-matrix","text":"The Tool Chain Matrix(s) provides a brief description and links to each application or framework used within JTSDK-Tools . Installation , Configuration and Removal will be outlined in each of the respective application or framework documents as appropriate. Collections such as MSYS2 include many GNU Core Utils that are not outlined specifically in this document. For more information a given item, following the links provided.","title":"Tool Chain Matrix"},{"location":"windows/Home/#prerequisite-tools","text":"In order to checkout and compile the JTSDK Net Core Package , users must have three applications installed at the system level . See Prereq Install Instructions for details. Application Purpose Microsoft Net Core SDK Cross Platform Framework based on C-Charp Visual Studio Code Powerful Cross-Platform Editor Git Client Distributed Version Control System Client","title":"Prerequisite Tools"},{"location":"windows/Home/#core-tools","text":"The following tools are required and comprise the Core Tool Chain . All of the tools in this group are required to buolw WSJT-X , and should be considered the bare minimum installation. Application Purpose Asciidoctor General purpose documeatation system based on Ruby CMake Cross-Platform tools to build, test and deploy software FFTW Subroutine library for computing the discrete Fourier transform (DFT) in one or more dimensions InnoSetup Install and build system for Windows applications Libusb C-Library providing access to USB devices on Windows MSYS2 A collection of GNU Tools for Windows with Pacman package manager NSIS Professional open source system to create Windows installers Nuget NuGet is the package manager for .NET PKG-Config Package Config built for Windows Qt Cross-Platform Development Framework Ruby Open source programming language Subversion Cross-Platform Version Control System","title":"Core Tools"},{"location":"windows/Home/#documentation-tools","text":"The following Document utilities can be installed in addition to the JTSDK Core Tool Chain See Install Doc Tools for details. Application Purpose AsciiDOc The predecessor to Asciidoctor (Python based) DocFX Generates documentation directly from source code Pandoc Cross-Platform document conversion utility","title":"Documentation Tools"},{"location":"windows/Home/#database-tools","text":"The following tools are general purpose database applications and / or servers. See Install-PostgreSQL , and Install-DB-Tools for details. PostgreSQL is a stand-alone guide, where as SQLite3 is a simply installed from the Install-DB-Tools Guide . As more database tools are added, and provided they do not need a stand alone guide, they will be added to the Install-DB-Tools installer. Application Purpose PostgreSQL Advanced High Performance Relational Database Sqlite A powerful In-Process SQL Database Engine","title":"Database Tools"},{"location":"windows/Home/#python-tools","text":"The following Python Tools can be installed in addition to the JTSDK Core Tool Chain . See Install Python for details. Application Purpose Anaconda Python Python data science platform","title":"Python Tools"},{"location":"windows/Home/#java-tools","text":"The following tools are generally related to Java and associated build activities. While applications such as Gradle and Eclipse may very well apply to other programming languages, they are most commonly used in Java related application development. See Install Java , and Install Java Tools for more details. Application Purpose Java Cross-Platform Programming Language Ant Java Library, and CLI tools, for building Java Apps from the Apache Foundation Eclipse Cross-Platform IDE primarily for Java Application Development Gradle Cross-Platform tools for building and deploying applications Maven Build System from the Apache Foundation","title":"Java Tools"},{"location":"windows/Home/#miscellaneous","text":"The following tools can be installed in addition to the JTSDK Core Tool Chain . See Miscellaneous Tools Install Instructions for details. Application Purpose RapidEE Rapid Environment Editor (RapidEE) is an environment variables editor. Visual Studio Fully-featured integrated development environment (IDE) for Android, iOS, Windows, web, and cloud Others More to follow","title":"Miscellaneous"},{"location":"windows/Install-Asciidoctor/","text":"Install AsciiDoctor \u00b6 Application Data Name AsciiDoctor Version 1.5.7.1+ Arch 32 bit Description Ruby Based Documentation System AsciiDoctor is a fast text processor and publishing tool-chain for converting AsciiDoc content to HTML5, DocBook, PDF, and other formats. -- The AsciiDoctor Project, AsciiDoctor.org Helpful Links \u00b6 Website Writers Guide User Manual Quick Reference CodeRay Live Demo Installation \u00b6 Installation is fairly straight forward from the command-line. Ensure you have installed Core Tools , then proceed with the following steps. Use the programs menu or any means of opening a standard (non-administrator) Command Prompt. Set Environment Variables \u00b6 In the Command Prompt window, type the following cd /d (C|D):\\JTSDK-Tools\\tools\\ruby\\2.5.1-2\\bin setrbvars.cmd Set Environment Variables Run Install Command \u00b6 In the Command Prompt window, type the following gem install asciidoctor asciidoctor --version Install Asciidoctor Install CodeRay \u00b6 In the Command Prompt window, type the following gem install coderay Install CodeRay Gem This concludes installation of AsciiDoctor with the addition of CodeRay . Next Step \u00b6 Proceed to ==> Qt Tools Installation","title":"6. AsciiDoctor"},{"location":"windows/Install-Asciidoctor/#install-asciidoctor","text":"Application Data Name AsciiDoctor Version 1.5.7.1+ Arch 32 bit Description Ruby Based Documentation System AsciiDoctor is a fast text processor and publishing tool-chain for converting AsciiDoc content to HTML5, DocBook, PDF, and other formats. -- The AsciiDoctor Project, AsciiDoctor.org","title":"Install AsciiDoctor"},{"location":"windows/Install-Asciidoctor/#helpful-links","text":"Website Writers Guide User Manual Quick Reference CodeRay Live Demo","title":"Helpful Links"},{"location":"windows/Install-Asciidoctor/#installation","text":"Installation is fairly straight forward from the command-line. Ensure you have installed Core Tools , then proceed with the following steps. Use the programs menu or any means of opening a standard (non-administrator) Command Prompt.","title":"Installation"},{"location":"windows/Install-Asciidoctor/#set-environment-variables","text":"In the Command Prompt window, type the following cd /d (C|D):\\JTSDK-Tools\\tools\\ruby\\2.5.1-2\\bin setrbvars.cmd Set Environment Variables","title":"Set Environment Variables"},{"location":"windows/Install-Asciidoctor/#run-install-command","text":"In the Command Prompt window, type the following gem install asciidoctor asciidoctor --version Install Asciidoctor","title":"Run Install Command"},{"location":"windows/Install-Asciidoctor/#install-coderay","text":"In the Command Prompt window, type the following gem install coderay Install CodeRay Gem This concludes installation of AsciiDoctor with the addition of CodeRay .","title":"Install CodeRay"},{"location":"windows/Install-Asciidoctor/#next-step","text":"Proceed to ==> Qt Tools Installation","title":"Next Step"},{"location":"windows/Install-Core-Apps/","text":"Install Core Applications \u00b6 Application Data Name Dotnet Core Apps Version 3.0.0 Arch 64 or 32 bit Description Net Core Apps used in JTSDK v3 Supported Operating Systems \u00b6 At present, this repository only supports Windows. Later releases will include generic Linux support, and additional Ubuntu / Debian specific artifacts. Windows \u00b6 Win-10 x86-64 / x86-32 Win-7|8 x86-64 / x86-32, in theory, but not tested. Win-XP and Vista are not supported. Linux \u00b6 Linux - Unsupported at this time. Arm Devices - Unsupported at this time. Installation \u00b6 Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. Prerequisite Tools Installation Core Tool Installation # Open a Windows Console, then change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Make a Source Directory mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-dotnet-core.git # Change Directories and Make Install cd jtsdk-dotnet-core make install Upgrade \u00b6 If the source clone is still present on the system, upgrading is the same as installation, with an additional pull command. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install This concludes the installation and / or upgrade for JTSDK Core Applications . Next Step \u00b6 Proceed to => MSYS2 Configuration","title":"8. Core Apps"},{"location":"windows/Install-Core-Apps/#install-core-applications","text":"Application Data Name Dotnet Core Apps Version 3.0.0 Arch 64 or 32 bit Description Net Core Apps used in JTSDK v3","title":"Install Core Applications"},{"location":"windows/Install-Core-Apps/#supported-operating-systems","text":"At present, this repository only supports Windows. Later releases will include generic Linux support, and additional Ubuntu / Debian specific artifacts.","title":"Supported Operating Systems"},{"location":"windows/Install-Core-Apps/#windows","text":"Win-10 x86-64 / x86-32 Win-7|8 x86-64 / x86-32, in theory, but not tested. Win-XP and Vista are not supported.","title":"Windows"},{"location":"windows/Install-Core-Apps/#linux","text":"Linux - Unsupported at this time. Arm Devices - Unsupported at this time.","title":"Linux"},{"location":"windows/Install-Core-Apps/#installation","text":"Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. Prerequisite Tools Installation Core Tool Installation # Open a Windows Console, then change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Make a Source Directory mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-dotnet-core.git # Change Directories and Make Install cd jtsdk-dotnet-core make install","title":"Installation"},{"location":"windows/Install-Core-Apps/#upgrade","text":"If the source clone is still present on the system, upgrading is the same as installation, with an additional pull command. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install This concludes the installation and / or upgrade for JTSDK Core Applications .","title":"Upgrade"},{"location":"windows/Install-Core-Apps/#next-step","text":"Proceed to => MSYS2 Configuration","title":"Next Step"},{"location":"windows/Install-Core-Tools/","text":"Install Core Tools \u00b6 Application Data Name Core Tools Version 3.0.3 Arch 64 Bit Description Applications and Frameworks used in JTSDK v3 Download \u00b6 Required : From release folder , download the latest version of JTSDK Core Tools Installer Optional : In addition to the Core Tools Installer, users can download a self-extracting third-party-archive which contains all of the individual components that are manually installed throughout the remainder of install process. Installation \u00b6 Browse to, then double-click the downloaded JTSDK Core Tools Installer. Accept License \u00b6 Accept License Select Install Location \u00b6 Select which drive you wish the installer to use. NOTE: The base install folder is fixed to JTSDK-Tools , and cannot be changed. Only the drive location (C|D|E) and so on, can be changed. Select Install Location Proceed to Install \u00b6 Proceed to Install Install Progress \u00b6 NOTE: Depending on overall system speed, the installation can take several minutes to complete. Install Progress Finish Installation \u00b6 Finish Installation This concludes the Core Tools portion of the installation. Proceed to Next Step \u00b6 Next Step => Python Installation","title":"5. Core Tools"},{"location":"windows/Install-Core-Tools/#install-core-tools","text":"Application Data Name Core Tools Version 3.0.3 Arch 64 Bit Description Applications and Frameworks used in JTSDK v3","title":"Install Core Tools"},{"location":"windows/Install-Core-Tools/#download","text":"Required : From release folder , download the latest version of JTSDK Core Tools Installer Optional : In addition to the Core Tools Installer, users can download a self-extracting third-party-archive which contains all of the individual components that are manually installed throughout the remainder of install process.","title":"Download"},{"location":"windows/Install-Core-Tools/#installation","text":"Browse to, then double-click the downloaded JTSDK Core Tools Installer.","title":"Installation"},{"location":"windows/Install-Core-Tools/#accept-license","text":"Accept License","title":"Accept License"},{"location":"windows/Install-Core-Tools/#select-install-location","text":"Select which drive you wish the installer to use. NOTE: The base install folder is fixed to JTSDK-Tools , and cannot be changed. Only the drive location (C|D|E) and so on, can be changed. Select Install Location","title":"Select Install Location"},{"location":"windows/Install-Core-Tools/#proceed-to-install","text":"Proceed to Install","title":"Proceed to Install"},{"location":"windows/Install-Core-Tools/#install-progress","text":"NOTE: Depending on overall system speed, the installation can take several minutes to complete. Install Progress","title":"Install Progress"},{"location":"windows/Install-Core-Tools/#finish-installation","text":"Finish Installation This concludes the Core Tools portion of the installation.","title":"Finish Installation"},{"location":"windows/Install-Core-Tools/#proceed-to-next-step","text":"Next Step => Python Installation","title":"Proceed to Next Step"},{"location":"windows/Install-DB-Tools/","text":"Optional - Install DB Tools \u00b6 Application Data Name Database Tools Version Various Arch 32 and 64 bit Description Various database tools The Database tools installation adds a small number of tools used in accessing, storing, and managing data storage activity. As additional tools are integrated, they will be added to the list. Download \u00b6 Sourceforge Release Files Version Matrix \u00b6 The following versions were current as of JTSDK-Tools v3.0.0 . The versions are subject to change with each update of Install-DB-Tools . Application Version Sqlite3 1.8.0_172 Installation \u00b6 Browse to, and double-click the downloaded [JTSDK-DB-Tools][] Installer, then follow the steps below. Accept License \u00b6 Accept License Select Install Location \u00b6 Select which drive you you installed JTSDK-Tools to. Select Install Location Proceed to Install \u00b6 Proceed to Install Finish Installation \u00b6 Finish Installation This concludes the JTSDK-DB-Tools installation. Next Step \u00b6 Proceed to ==> Documentation Tools Installation","title":"Database Tools"},{"location":"windows/Install-DB-Tools/#optional-install-db-tools","text":"Application Data Name Database Tools Version Various Arch 32 and 64 bit Description Various database tools The Database tools installation adds a small number of tools used in accessing, storing, and managing data storage activity. As additional tools are integrated, they will be added to the list.","title":"Optional - Install DB Tools"},{"location":"windows/Install-DB-Tools/#download","text":"Sourceforge Release Files","title":"Download"},{"location":"windows/Install-DB-Tools/#version-matrix","text":"The following versions were current as of JTSDK-Tools v3.0.0 . The versions are subject to change with each update of Install-DB-Tools . Application Version Sqlite3 1.8.0_172","title":"Version Matrix"},{"location":"windows/Install-DB-Tools/#installation","text":"Browse to, and double-click the downloaded [JTSDK-DB-Tools][] Installer, then follow the steps below.","title":"Installation"},{"location":"windows/Install-DB-Tools/#accept-license","text":"Accept License","title":"Accept License"},{"location":"windows/Install-DB-Tools/#select-install-location","text":"Select which drive you you installed JTSDK-Tools to. Select Install Location","title":"Select Install Location"},{"location":"windows/Install-DB-Tools/#proceed-to-install","text":"Proceed to Install","title":"Proceed to Install"},{"location":"windows/Install-DB-Tools/#finish-installation","text":"Finish Installation This concludes the JTSDK-DB-Tools installation.","title":"Finish Installation"},{"location":"windows/Install-DB-Tools/#next-step","text":"Proceed to ==> Documentation Tools Installation","title":"Next Step"},{"location":"windows/Install-Doc-Tools/","text":"Optional - Install Doc Tools \u00b6 Application Data Name Doc Tools Version 3.0.0 Arch 64 bit Description Various Documentation Build Frameworks Doc tools are for generating, and / or converting many types of documentation inputs and outputs. If you need documentation conversion tools, install this package. Download \u00b6 Sourceforge Release Files Version Matrix \u00b6 The following versions were current as of JTSDK Doc Tools v3.0.0 . The versions are subject to change with each update of Install-Doc-Tools . Application Version DocFX 2.37 Pandoc 2.2.1 Installation \u00b6 Browse to, and double-click the downloaded JTSDK-Doc-Tools Installer, then follow the steps below. Accept License \u00b6 Accept License Select Install Location \u00b6 Select which drive you you installed JTSDK-Tools to. Install Location Proceed to Install \u00b6 Proceed to Install Install Progress \u00b6 Install Progress Finish Installation \u00b6 Finish Installation This concludes the JTSDK-Doc-Tools installation. Next Step \u00b6 Proceed to ==> Java Tools Installation","title":"Doc Tools"},{"location":"windows/Install-Doc-Tools/#optional-install-doc-tools","text":"Application Data Name Doc Tools Version 3.0.0 Arch 64 bit Description Various Documentation Build Frameworks Doc tools are for generating, and / or converting many types of documentation inputs and outputs. If you need documentation conversion tools, install this package.","title":"Optional - Install Doc Tools"},{"location":"windows/Install-Doc-Tools/#download","text":"Sourceforge Release Files","title":"Download"},{"location":"windows/Install-Doc-Tools/#version-matrix","text":"The following versions were current as of JTSDK Doc Tools v3.0.0 . The versions are subject to change with each update of Install-Doc-Tools . Application Version DocFX 2.37 Pandoc 2.2.1","title":"Version Matrix"},{"location":"windows/Install-Doc-Tools/#installation","text":"Browse to, and double-click the downloaded JTSDK-Doc-Tools Installer, then follow the steps below.","title":"Installation"},{"location":"windows/Install-Doc-Tools/#accept-license","text":"Accept License","title":"Accept License"},{"location":"windows/Install-Doc-Tools/#select-install-location","text":"Select which drive you you installed JTSDK-Tools to. Install Location","title":"Select Install Location"},{"location":"windows/Install-Doc-Tools/#proceed-to-install","text":"Proceed to Install","title":"Proceed to Install"},{"location":"windows/Install-Doc-Tools/#install-progress","text":"Install Progress","title":"Install Progress"},{"location":"windows/Install-Doc-Tools/#finish-installation","text":"Finish Installation This concludes the JTSDK-Doc-Tools installation.","title":"Finish Installation"},{"location":"windows/Install-Doc-Tools/#next-step","text":"Proceed to ==> Java Tools Installation","title":"Next Step"},{"location":"windows/Install-Eclipse/","text":"Optional - Install Eclipse IDE \u00b6 Application Data Name Eclipse Version Photon Arch 64 bit Description Eclipse IDE for Java Developers Helpful Links \u00b6 Under Development Download \u00b6 Under Development Installation \u00b6 Under Development","title":"Eclipse"},{"location":"windows/Install-Eclipse/#optional-install-eclipse-ide","text":"Application Data Name Eclipse Version Photon Arch 64 bit Description Eclipse IDE for Java Developers","title":"Optional - Install Eclipse IDE"},{"location":"windows/Install-Eclipse/#helpful-links","text":"Under Development","title":"Helpful Links"},{"location":"windows/Install-Eclipse/#download","text":"Under Development","title":"Download"},{"location":"windows/Install-Eclipse/#installation","text":"Under Development","title":"Installation"},{"location":"windows/Install-Git-Client/","text":"Install Git Client \u00b6 Application Data Name Git-SCM Version 2.18.0 Arch 64 or 32 Bit Description Distributed Version Control System Client Helpful Links \u00b6 Download : git-for-windows Website : git-scm.com Reference, Documentation, and Videos First Time Setup Pre-Installation \u00b6 Git-SCM has an option to use Visual Studio Code as the default editor. If you'd like to select this feature during installation, ensure you've installed Visual Studio Code before installing Git . Notes \u00b6 The installation location of Git can be set to the default installer location, or anywhere on the system a user prefers. The only stipulation for JTSDK is, Git must be available from the systems normal command-line console. That is to say, the command git --version must render without error from a Windows or Linux terminal / console. Choosing 32 or 64 bit is up to the user. Accessing the download page will trigger an automated download of the latest version based on your operating system. If the system is 64bit, that is what will be downloaded. If you already have Git working on your system, and available form the command line, there is no need to re-install it for JTSDK usage. Installation \u00b6 The following walks through the steps known to work with JTSDK . IMPORTANT - The steps below are mere recommendations, and not set in stone. If you have a particular preference or need for an option, you should use your own judgement during the installation. If a specific option is needed by JTSDK , it will be made known during the relevant section. Download the appropriate installer from git-scm.com . Run the installer and follow the steps below. Accept License \u00b6 GNU Public License Install Location \u00b6 Unless you have a specific need to install elsewhere, the default location provided by the installer is recommended. Use Default Installation Location Select Options \u00b6 Select Desired Options Start Menu \u00b6 Start Menu Selection VS Code Editor \u00b6 Using VS Code as your default editor is optional but highly recommended for use with JTSDK ; unless of course, you have a favorite cross-platform editor. VS Code Editor Selection Adjusting Environment \u00b6 This section is at the users discretion. JTSDK will be using MSYS2 GNU Tools. However, if you want a select number of items available outside of JTSDK Environments , choose what best suits your preference. Adjust Environment OpenSSL Selection \u00b6 This is not a critical component of JTSDK , but for consistency, choosing OpenSSL has worked well in the past. It's up to the user. If you choose Windows Secure Channel Library, you will need to configure the certificates and Git to use them separately. SSL Option Selection Line Ending Preference \u00b6 This option is again up to the user. However, for use with JTSDK projects, selecting the first option Checkout Windows-Style, commit Unix-Style endings should work for the project. If you're a developer and need other endings, choose what best suits your needs. Line Endings Preference Console Selection \u00b6 JTSDK has no specific need for MinTTY , but the option provides many desirable display features for end users. Terminal Selection Extra Options \u00b6 JTSDK has no specific use for these options, but others may. It's up to the user as to what should be selected. Extra Options Install Progress \u00b6 Install Progress Launch Git Bash \u00b6 To ensure Git Bash is working properly, select the Launch Git Bash option at the conclusion of the installation. Once proper functionality has been verified, close the Git Bash console. Install Progress Git Configuration \u00b6 If you plan to check-in code, or perform other repository activity, review the First Time Setup documentation paying particular attention to username and email settings. This concludes the Git Client Install . Next Step \u00b6 Proceed to ==> Install Core Tools","title":"3. Git Client"},{"location":"windows/Install-Git-Client/#install-git-client","text":"Application Data Name Git-SCM Version 2.18.0 Arch 64 or 32 Bit Description Distributed Version Control System Client","title":"Install Git Client"},{"location":"windows/Install-Git-Client/#helpful-links","text":"Download : git-for-windows Website : git-scm.com Reference, Documentation, and Videos First Time Setup","title":"Helpful Links"},{"location":"windows/Install-Git-Client/#pre-installation","text":"Git-SCM has an option to use Visual Studio Code as the default editor. If you'd like to select this feature during installation, ensure you've installed Visual Studio Code before installing Git .","title":"Pre-Installation"},{"location":"windows/Install-Git-Client/#notes","text":"The installation location of Git can be set to the default installer location, or anywhere on the system a user prefers. The only stipulation for JTSDK is, Git must be available from the systems normal command-line console. That is to say, the command git --version must render without error from a Windows or Linux terminal / console. Choosing 32 or 64 bit is up to the user. Accessing the download page will trigger an automated download of the latest version based on your operating system. If the system is 64bit, that is what will be downloaded. If you already have Git working on your system, and available form the command line, there is no need to re-install it for JTSDK usage.","title":"Notes"},{"location":"windows/Install-Git-Client/#installation","text":"The following walks through the steps known to work with JTSDK . IMPORTANT - The steps below are mere recommendations, and not set in stone. If you have a particular preference or need for an option, you should use your own judgement during the installation. If a specific option is needed by JTSDK , it will be made known during the relevant section. Download the appropriate installer from git-scm.com . Run the installer and follow the steps below.","title":"Installation"},{"location":"windows/Install-Git-Client/#accept-license","text":"GNU Public License","title":"Accept License"},{"location":"windows/Install-Git-Client/#install-location","text":"Unless you have a specific need to install elsewhere, the default location provided by the installer is recommended. Use Default Installation Location","title":"Install Location"},{"location":"windows/Install-Git-Client/#select-options","text":"Select Desired Options","title":"Select Options"},{"location":"windows/Install-Git-Client/#start-menu","text":"Start Menu Selection","title":"Start Menu"},{"location":"windows/Install-Git-Client/#vs-code-editor","text":"Using VS Code as your default editor is optional but highly recommended for use with JTSDK ; unless of course, you have a favorite cross-platform editor. VS Code Editor Selection","title":"VS Code Editor"},{"location":"windows/Install-Git-Client/#adjusting-environment","text":"This section is at the users discretion. JTSDK will be using MSYS2 GNU Tools. However, if you want a select number of items available outside of JTSDK Environments , choose what best suits your preference. Adjust Environment","title":"Adjusting Environment"},{"location":"windows/Install-Git-Client/#openssl-selection","text":"This is not a critical component of JTSDK , but for consistency, choosing OpenSSL has worked well in the past. It's up to the user. If you choose Windows Secure Channel Library, you will need to configure the certificates and Git to use them separately. SSL Option Selection","title":"OpenSSL Selection"},{"location":"windows/Install-Git-Client/#line-ending-preference","text":"This option is again up to the user. However, for use with JTSDK projects, selecting the first option Checkout Windows-Style, commit Unix-Style endings should work for the project. If you're a developer and need other endings, choose what best suits your needs. Line Endings Preference","title":"Line Ending Preference"},{"location":"windows/Install-Git-Client/#console-selection","text":"JTSDK has no specific need for MinTTY , but the option provides many desirable display features for end users. Terminal Selection","title":"Console Selection"},{"location":"windows/Install-Git-Client/#extra-options","text":"JTSDK has no specific use for these options, but others may. It's up to the user as to what should be selected. Extra Options","title":"Extra Options"},{"location":"windows/Install-Git-Client/#install-progress","text":"Install Progress","title":"Install Progress"},{"location":"windows/Install-Git-Client/#launch-git-bash","text":"To ensure Git Bash is working properly, select the Launch Git Bash option at the conclusion of the installation. Once proper functionality has been verified, close the Git Bash console. Install Progress","title":"Launch Git Bash"},{"location":"windows/Install-Git-Client/#git-configuration","text":"If you plan to check-in code, or perform other repository activity, review the First Time Setup documentation paying particular attention to username and email settings. This concludes the Git Client Install .","title":"Git Configuration"},{"location":"windows/Install-Git-Client/#next-step","text":"Proceed to ==> Install Core Tools","title":"Next Step"},{"location":"windows/Install-Java-Tools/","text":"Optional - Install Java Tools \u00b6 Application Data Name Java Tools Version Various Arch 32 or 64 bit Description Cross-Platform High Performance Development Framework IMPORTANT: It matters not which ARCH you install. However, If you install 64 bit Java , then you should install all 64 bit tools that use it. Enterprise application most certainly should use 64 bit. For home or small projects, 32 bit should be more than adequate. JTSDK will be using all 64 Bit wherever possible. For example: Eclipse , NetBeans , and InteliJ IDE's should all be 64 bit if your using 64 bit Java . NOTE: Exceptions to this would be Apache Ant , Apache Maven , and Gradle , as they are only provided in 32 bit. Download \u00b6 Sourceforge Release Files Required : From the release folder , download the latest version of Jtsdk-Java-Tools . Version Matrix \u00b6 The following versions were current as of JTSDK-Tools v3.0.0 . The versions are subject to change with each update of Install-Java-Tools . Application Version Java 1.8.0_172 Maven 3.5.4 Gradle 4.8.1 Ant 1.10.4 Overview \u00b6 The packages within this installer will not require individual guides. However, most framework applications within the Java sphere require setting of environment variables that point to the install location. The matrix below describes those variables. It is up to the end-user how to accomplish this, but the matrix points to several How-To articles to perform the task. Java , Maven and Ant are are particularly sensitive to these variables. If not set properly, there will be no end to problems down the road. Environment Variables \u00b6 Variable Purpose How-To JAVA_HOME Location for Java How-To JAVA_HOME M2_HOME Location for Maven How-To M2_HOME ANT_HOME Location for Maven How-To ANT_HOME GRADLE_OPTS Sourced to, and used when Gradle is executed How-To GRADLE_OPTS Location Data \u00b6 With Install-Java-Tools , the following paths are used at for installation.: NOTE Java is a separate installation ( Install-Java ) from the Install-Java-Tools . However, JAVA_HOME is still required. Java (assuming 64 bit System Install): C:\\Program Files\\Java\\jdk1.8.0_172 <-- JDK with compiler C:\\Program Files\\Java\\jre1.8.0_172 <-- Java Runtime Note: The Java Installer by Oracle updates these paths. If you set JAVA_HOME properly, it will automatically be updated when a new version is run through the update UI. Maven: (C|D):\\JTSDK-Tools\\tools\\maven\\<VERSION>\\bin Gradle: (C|D):\\JTSDK-Tools\\tools\\gradle\\<VERSION>\\bin Ant (C|D:\\JTSDK-Tools\\tools\\ant\\<VERSION>\\bin Installation \u00b6 Browse to, and double-click the downloaded JTSDK-Java-Tools Installer, then follow the steps below. Accept License \u00b6 Accept License Select Install Location \u00b6 Select which drive you you installed JTSDK-Tools to. Select Install Location Proceed to Install \u00b6 Proceed to Install Install Progress \u00b6 Install Progress Finish Installation \u00b6 Finish Installation This concludes the JTSDK-Java-Tools installation. Next Step \u00b6 Proceed to ==> Java Installation","title":"Java Tools"},{"location":"windows/Install-Java-Tools/#optional-install-java-tools","text":"Application Data Name Java Tools Version Various Arch 32 or 64 bit Description Cross-Platform High Performance Development Framework IMPORTANT: It matters not which ARCH you install. However, If you install 64 bit Java , then you should install all 64 bit tools that use it. Enterprise application most certainly should use 64 bit. For home or small projects, 32 bit should be more than adequate. JTSDK will be using all 64 Bit wherever possible. For example: Eclipse , NetBeans , and InteliJ IDE's should all be 64 bit if your using 64 bit Java . NOTE: Exceptions to this would be Apache Ant , Apache Maven , and Gradle , as they are only provided in 32 bit.","title":"Optional - Install Java Tools"},{"location":"windows/Install-Java-Tools/#download","text":"Sourceforge Release Files Required : From the release folder , download the latest version of Jtsdk-Java-Tools .","title":"Download"},{"location":"windows/Install-Java-Tools/#version-matrix","text":"The following versions were current as of JTSDK-Tools v3.0.0 . The versions are subject to change with each update of Install-Java-Tools . Application Version Java 1.8.0_172 Maven 3.5.4 Gradle 4.8.1 Ant 1.10.4","title":"Version Matrix"},{"location":"windows/Install-Java-Tools/#overview","text":"The packages within this installer will not require individual guides. However, most framework applications within the Java sphere require setting of environment variables that point to the install location. The matrix below describes those variables. It is up to the end-user how to accomplish this, but the matrix points to several How-To articles to perform the task. Java , Maven and Ant are are particularly sensitive to these variables. If not set properly, there will be no end to problems down the road.","title":"Overview"},{"location":"windows/Install-Java-Tools/#environment-variables","text":"Variable Purpose How-To JAVA_HOME Location for Java How-To JAVA_HOME M2_HOME Location for Maven How-To M2_HOME ANT_HOME Location for Maven How-To ANT_HOME GRADLE_OPTS Sourced to, and used when Gradle is executed How-To GRADLE_OPTS","title":"Environment Variables"},{"location":"windows/Install-Java-Tools/#location-data","text":"With Install-Java-Tools , the following paths are used at for installation.: NOTE Java is a separate installation ( Install-Java ) from the Install-Java-Tools . However, JAVA_HOME is still required. Java (assuming 64 bit System Install): C:\\Program Files\\Java\\jdk1.8.0_172 <-- JDK with compiler C:\\Program Files\\Java\\jre1.8.0_172 <-- Java Runtime Note: The Java Installer by Oracle updates these paths. If you set JAVA_HOME properly, it will automatically be updated when a new version is run through the update UI. Maven: (C|D):\\JTSDK-Tools\\tools\\maven\\<VERSION>\\bin Gradle: (C|D):\\JTSDK-Tools\\tools\\gradle\\<VERSION>\\bin Ant (C|D:\\JTSDK-Tools\\tools\\ant\\<VERSION>\\bin","title":"Location Data"},{"location":"windows/Install-Java-Tools/#installation","text":"Browse to, and double-click the downloaded JTSDK-Java-Tools Installer, then follow the steps below.","title":"Installation"},{"location":"windows/Install-Java-Tools/#accept-license","text":"Accept License","title":"Accept License"},{"location":"windows/Install-Java-Tools/#select-install-location","text":"Select which drive you you installed JTSDK-Tools to. Select Install Location","title":"Select Install Location"},{"location":"windows/Install-Java-Tools/#proceed-to-install","text":"Proceed to Install","title":"Proceed to Install"},{"location":"windows/Install-Java-Tools/#install-progress","text":"Install Progress","title":"Install Progress"},{"location":"windows/Install-Java-Tools/#finish-installation","text":"Finish Installation This concludes the JTSDK-Java-Tools installation.","title":"Finish Installation"},{"location":"windows/Install-Java-Tools/#next-step","text":"Proceed to ==> Java Installation","title":"Next Step"},{"location":"windows/Install-Java/","text":"Optional - Install Java \u00b6 Application Data Name Java Version 1.8 u172+ Arch 64 bit Description Cross-Platform High Performance Development Framework Download \u00b6 Oracle JavaSE Installer JTSDK Third Party Installer Package Both downloads provide the same installer, and reflect the installation steps below. If the official download is a later version qithin the 1.8 series, use it instead. If you are downloading from the Oracle site, make sure you you select the JDK version for example: # Versions at the time of writing jdk-8u172-windows-x64 jdk-8u181-windows-x64 You should use the latest patch release version. In the example above, jdk-8u181-windows-x64 would be the latest available. Once installed, the Java installer has a real-time update service that will alert you when Oracle has released an update. The same service will also download/update the the instance for you if you allow it to. Installation \u00b6 Browse to, then double-click the downloaded Java Installer , and follow the steps below. Initial Screen \u00b6 Select next to continue. Initial Screen Install Selections \u00b6 Leave the defaults selected, and click next. Install Selections Install Extraction \u00b6 No action required. Install Extraction Install Location \u00b6 Use default install location: (highly recommended) Install Location Install Progress \u00b6 No action required. Install Progress Finish Installation \u00b6 No action required. Read docs if desired. Finish Installation Set JAVA_HOME \u00b6 Select System Settings Select Environment Variables Select Environment Variables Add New System Variable New System Variable Add The New Path Add The New Path Check Java \u00b6 Open Windows Command Prompt, and test that Java returns properly. # In the Windows Command Prompt, test the following commands java -d64 -version # Check JAVA_HOME echo. && echo JAVA_HOME: %JAVA_HOME% Check Java Set GRADLE_HOME and M2_HOME \u00b6 Using the same process as you did with JAVA_HOME, set GRADLE_HOME and M2_HOME. Gradle Settings \u00b6 GRADLE_HOME Change Gradle version to : 4.9 Change Maven (M2) version to : 3.5.4 Set GRADLE_HOME (C|D):\\JTSDK-Tools\\tools\\gradle\\4.9 Set GRADLE_HOME Set Gradle Path Set Gradle Path Maven Settings \u00b6 Set MAVEN_HOME (C|D):\\JTSDK-Tools\\tools\\maven\\3.5.4 Set MAVEN_HOME Set Maven path Set Maven Path Check Gradle Version \u00b6 In the Windows Command Prompt window, check Gradle Version # Check Gradle Version gradle --version # Check Maven Version mvn --version Gradle Version This concludes the Java Installation . Next Step \u00b6 Proceed to ==> PostgreSQL Installation","title":"Java"},{"location":"windows/Install-Java/#optional-install-java","text":"Application Data Name Java Version 1.8 u172+ Arch 64 bit Description Cross-Platform High Performance Development Framework","title":"Optional - Install Java"},{"location":"windows/Install-Java/#download","text":"Oracle JavaSE Installer JTSDK Third Party Installer Package Both downloads provide the same installer, and reflect the installation steps below. If the official download is a later version qithin the 1.8 series, use it instead. If you are downloading from the Oracle site, make sure you you select the JDK version for example: # Versions at the time of writing jdk-8u172-windows-x64 jdk-8u181-windows-x64 You should use the latest patch release version. In the example above, jdk-8u181-windows-x64 would be the latest available. Once installed, the Java installer has a real-time update service that will alert you when Oracle has released an update. The same service will also download/update the the instance for you if you allow it to.","title":"Download"},{"location":"windows/Install-Java/#installation","text":"Browse to, then double-click the downloaded Java Installer , and follow the steps below.","title":"Installation"},{"location":"windows/Install-Java/#initial-screen","text":"Select next to continue. Initial Screen","title":"Initial Screen"},{"location":"windows/Install-Java/#install-selections","text":"Leave the defaults selected, and click next. Install Selections","title":"Install Selections"},{"location":"windows/Install-Java/#install-extraction","text":"No action required. Install Extraction","title":"Install Extraction"},{"location":"windows/Install-Java/#install-location","text":"Use default install location: (highly recommended) Install Location","title":"Install Location"},{"location":"windows/Install-Java/#install-progress","text":"No action required. Install Progress","title":"Install Progress"},{"location":"windows/Install-Java/#finish-installation","text":"No action required. Read docs if desired. Finish Installation","title":"Finish Installation"},{"location":"windows/Install-Java/#set-java_home","text":"Select System Settings Select Environment Variables Select Environment Variables Add New System Variable New System Variable Add The New Path Add The New Path","title":"Set JAVA_HOME"},{"location":"windows/Install-Java/#check-java","text":"Open Windows Command Prompt, and test that Java returns properly. # In the Windows Command Prompt, test the following commands java -d64 -version # Check JAVA_HOME echo. && echo JAVA_HOME: %JAVA_HOME% Check Java","title":"Check Java"},{"location":"windows/Install-Java/#set-gradle_home-and-m2_home","text":"Using the same process as you did with JAVA_HOME, set GRADLE_HOME and M2_HOME.","title":"Set GRADLE_HOME and M2_HOME"},{"location":"windows/Install-Java/#gradle-settings","text":"GRADLE_HOME Change Gradle version to : 4.9 Change Maven (M2) version to : 3.5.4 Set GRADLE_HOME (C|D):\\JTSDK-Tools\\tools\\gradle\\4.9 Set GRADLE_HOME Set Gradle Path Set Gradle Path","title":"Gradle Settings"},{"location":"windows/Install-Java/#maven-settings","text":"Set MAVEN_HOME (C|D):\\JTSDK-Tools\\tools\\maven\\3.5.4 Set MAVEN_HOME Set Maven path Set Maven Path","title":"Maven Settings"},{"location":"windows/Install-Java/#check-gradle-version","text":"In the Windows Command Prompt window, check Gradle Version # Check Gradle Version gradle --version # Check Maven Version mvn --version Gradle Version This concludes the Java Installation .","title":"Check Gradle Version"},{"location":"windows/Install-Java/#next-step","text":"Proceed to ==> PostgreSQL Installation","title":"Next Step"},{"location":"windows/Install-MSSQL-Server/","text":"Optional - Install MSSQL \u00b6 Application Data Name MS SQL Server Express Version 2017 Arch 64 bit Description Advanced High Performance Relational Database Store and support business data\u2014structured or unstructured and with native support for relational data, XML, and spatial data\u2014plus, increase temporal data granularity with date and time data types. Create small databases in basic desktop applications or tools using SQL Server Express LocalDB \u2014a lightweight deployment option that has fewer prerequisites and runs in-process with applications and not as a service. Easily scale your applications across SQL Server editions as you grow\u2014without having to change application code due to the common programming surface enabled by SQL Server 2017. -- Microsoft Corporation Installation \u00b6 Under Development.","title":"MSSQL"},{"location":"windows/Install-MSSQL-Server/#optional-install-mssql","text":"Application Data Name MS SQL Server Express Version 2017 Arch 64 bit Description Advanced High Performance Relational Database Store and support business data\u2014structured or unstructured and with native support for relational data, XML, and spatial data\u2014plus, increase temporal data granularity with date and time data types. Create small databases in basic desktop applications or tools using SQL Server Express LocalDB \u2014a lightweight deployment option that has fewer prerequisites and runs in-process with applications and not as a service. Easily scale your applications across SQL Server editions as you grow\u2014without having to change application code due to the common programming surface enabled by SQL Server 2017. -- Microsoft Corporation","title":"Optional - Install MSSQL"},{"location":"windows/Install-MSSQL-Server/#installation","text":"Under Development.","title":"Installation"},{"location":"windows/Install-Misc-Tools/","text":"Optional - Install Misc Tools \u00b6 Application Data Name Various Version Various Arch 64 bit Description Miscellaneous Tool Recommendations Helpful Links \u00b6 Under Development Download \u00b6 Under Development Installation \u00b6 Under Development","title":"Misc Tools"},{"location":"windows/Install-Misc-Tools/#optional-install-misc-tools","text":"Application Data Name Various Version Various Arch 64 bit Description Miscellaneous Tool Recommendations","title":"Optional - Install Misc Tools"},{"location":"windows/Install-Misc-Tools/#helpful-links","text":"Under Development","title":"Helpful Links"},{"location":"windows/Install-Misc-Tools/#download","text":"Under Development","title":"Download"},{"location":"windows/Install-Misc-Tools/#installation","text":"Under Development","title":"Installation"},{"location":"windows/Install-MongoDB/","text":"Optional - Install MongoDB \u00b6 Application Data Name MongoDB Version Latest Arch 64 bit Description Advanced High Performance Document Database MongoDB\u2019s flexible document data model makes working with data intuitive, whether you\u2019re building an app from scratch or updating an existing one. MongoDB lets you precisely control where data is placed globally so you can easily ensure fast performance anywhere and compliance with regulations. Complete deployment flexibility with seamless data migrations; build a ubiquitous data layer from mainframes to the public cloud and everywhere in between. -- MongoDB Corp. Installation \u00b6 Under Development.","title":"MongoDB"},{"location":"windows/Install-MongoDB/#optional-install-mongodb","text":"Application Data Name MongoDB Version Latest Arch 64 bit Description Advanced High Performance Document Database MongoDB\u2019s flexible document data model makes working with data intuitive, whether you\u2019re building an app from scratch or updating an existing one. MongoDB lets you precisely control where data is placed globally so you can easily ensure fast performance anywhere and compliance with regulations. Complete deployment flexibility with seamless data migrations; build a ubiquitous data layer from mainframes to the public cloud and everywhere in between. -- MongoDB Corp.","title":"Optional - Install MongoDB"},{"location":"windows/Install-MongoDB/#installation","text":"Under Development.","title":"Installation"},{"location":"windows/Install-Msys2/","text":"Install MSYS2 \u00b6 Application Data Name MSYS2 Version Rolling Arch 32 bit Description Collection of GNU Applications including Bash At its core is an independent rewrite of MSYS, based on modern Cygwin (POSIX compatibility layer) and MinGW-w64 with the aim of better interoperability with native Windows software. It provides a bash shell, Autotools, revision control systems and the like for building native Windows applications using MinGW-w64 tool-chains. -- *Alexey Pavlov (@alexpux) In terms of JTSDK usage, MSYS2 provides the means in which to build Hamlib, in addition to commonly used file-system utilities. Helpful Links \u00b6 MSYS2 - Wiki MSYS2 - Overview MSYS2 - Upgrading MSYS2 - Package Management Pacman - MSYS2 Package Manager Installation \u00b6 MSYS2 is installed as part of the JTSDK Core Tools Installer. However, each instance needs to be updated on a per system basis. The following steps walk though the process of configuring and updating the provided instance. Use the programs menu or any means of opening a standard (non-administrator) Command Prompt. Update MSYS2 \u00b6 At the Windows Command Prompt opened from above, type the following # Change directories, and open the MSYS2 Shell: cd /d (C|D):\\JTSDK-Tools\\tools\\msys2 msys2_shell.cmd Initial Opening Results Initial Update \u00b6 NOTE: During the initial update, you many see various warning, and in some cases, errors displayed on the screen during the internal update process. According to the MSYS2 Dev group, this is expected, and not to be concerned about. In the MSYS2 Command Window, type the following command, and when prompted with Proceed with installation? [Y/n] , type Y . At the conclusion of the Initial Update , close the window using the X at the top right on the MSYS2 console window. # In the MSYS2 Console, type: pacman -Syuu Initial Update Second Update \u00b6 Back in the Windows Command Prompt, re-run the command to open the MSYS2 console, and perform a second update with the following command: When prompted with Proceed with installation? [Y/n] , type Y . # In the Windows Console, type the following: msys2_shell.cmd # In the MSYS2 Console, type the following: pacman -Syuu Second Update Continue Updates \u00b6 Continue updating MSYS2 until no additional updates are presented. # In the MSYS2 Console, type the following: pacman -Syuu Continue Updates Install MSYS2 Packages \u00b6 In addition to the default installation, Hamlib has a number of build dependencies that user must install be for compiling. After the final update of MSYS, issue the following command in the terminal. NOTE: You must have installed JTSDK-Core-Apps before running the install command below. # In the MSYS2 Terminal, type the following: install-pkg-list.sh If the installation completes without error, you can test build Hamlib3 Test Build Hamlib \u00b6 IMPORTANT: Before building Hamlib , exit all MSYS2 and JTSDK-Tool consoles that are open. Open a Windows Console, type the following: # Change directories, and open the MSYS2 Shell: cd /d (C|D):\\JTSDK-Tools msys2 # In the MSYS2 Console, tyep: build-hamlib.sh # Watch for errors. If none, the results should be as follows. Hamlib Build Results Exit MSYS2 \u00b6 After test building hamlib3, exit the MSYS2 console using: exit Exit Windows Console \u00b6 Exit the Windows Command Prompt Console using: exit This concludes configuration of MSYS2 Next Step \u00b6 Proceed to ==> Python Installation","title":"9. MSYS2"},{"location":"windows/Install-Msys2/#install-msys2","text":"Application Data Name MSYS2 Version Rolling Arch 32 bit Description Collection of GNU Applications including Bash At its core is an independent rewrite of MSYS, based on modern Cygwin (POSIX compatibility layer) and MinGW-w64 with the aim of better interoperability with native Windows software. It provides a bash shell, Autotools, revision control systems and the like for building native Windows applications using MinGW-w64 tool-chains. -- *Alexey Pavlov (@alexpux) In terms of JTSDK usage, MSYS2 provides the means in which to build Hamlib, in addition to commonly used file-system utilities.","title":"Install MSYS2"},{"location":"windows/Install-Msys2/#helpful-links","text":"MSYS2 - Wiki MSYS2 - Overview MSYS2 - Upgrading MSYS2 - Package Management Pacman - MSYS2 Package Manager","title":"Helpful Links"},{"location":"windows/Install-Msys2/#installation","text":"MSYS2 is installed as part of the JTSDK Core Tools Installer. However, each instance needs to be updated on a per system basis. The following steps walk though the process of configuring and updating the provided instance. Use the programs menu or any means of opening a standard (non-administrator) Command Prompt.","title":"Installation"},{"location":"windows/Install-Msys2/#update-msys2","text":"At the Windows Command Prompt opened from above, type the following # Change directories, and open the MSYS2 Shell: cd /d (C|D):\\JTSDK-Tools\\tools\\msys2 msys2_shell.cmd Initial Opening Results","title":"Update MSYS2"},{"location":"windows/Install-Msys2/#initial-update","text":"NOTE: During the initial update, you many see various warning, and in some cases, errors displayed on the screen during the internal update process. According to the MSYS2 Dev group, this is expected, and not to be concerned about. In the MSYS2 Command Window, type the following command, and when prompted with Proceed with installation? [Y/n] , type Y . At the conclusion of the Initial Update , close the window using the X at the top right on the MSYS2 console window. # In the MSYS2 Console, type: pacman -Syuu Initial Update","title":"Initial Update"},{"location":"windows/Install-Msys2/#second-update","text":"Back in the Windows Command Prompt, re-run the command to open the MSYS2 console, and perform a second update with the following command: When prompted with Proceed with installation? [Y/n] , type Y . # In the Windows Console, type the following: msys2_shell.cmd # In the MSYS2 Console, type the following: pacman -Syuu Second Update","title":"Second Update"},{"location":"windows/Install-Msys2/#continue-updates","text":"Continue updating MSYS2 until no additional updates are presented. # In the MSYS2 Console, type the following: pacman -Syuu Continue Updates","title":"Continue Updates"},{"location":"windows/Install-Msys2/#install-msys2-packages","text":"In addition to the default installation, Hamlib has a number of build dependencies that user must install be for compiling. After the final update of MSYS, issue the following command in the terminal. NOTE: You must have installed JTSDK-Core-Apps before running the install command below. # In the MSYS2 Terminal, type the following: install-pkg-list.sh If the installation completes without error, you can test build Hamlib3","title":"Install MSYS2 Packages"},{"location":"windows/Install-Msys2/#test-build-hamlib","text":"IMPORTANT: Before building Hamlib , exit all MSYS2 and JTSDK-Tool consoles that are open. Open a Windows Console, type the following: # Change directories, and open the MSYS2 Shell: cd /d (C|D):\\JTSDK-Tools msys2 # In the MSYS2 Console, tyep: build-hamlib.sh # Watch for errors. If none, the results should be as follows. Hamlib Build Results","title":"Test Build Hamlib"},{"location":"windows/Install-Msys2/#exit-msys2","text":"After test building hamlib3, exit the MSYS2 console using: exit","title":"Exit MSYS2"},{"location":"windows/Install-Msys2/#exit-windows-console","text":"Exit the Windows Command Prompt Console using: exit This concludes configuration of MSYS2","title":"Exit Windows Console"},{"location":"windows/Install-Msys2/#next-step","text":"Proceed to ==> Python Installation","title":"Next Step"},{"location":"windows/Install-Net-Core-SDK/","text":"Install NetCore SDK \u00b6 Application Data Name Microsoft Net Core SDK Version 2.2.101 Arch 64 bit Description Net Core for building websites, services, and console apps. Helpful Links \u00b6 Website : Welcome to ASP.NET Core Reference, Documentation, and Videos Getting Started Tutorials Installation \u00b6 Download Net Core SDK Installation Steps Verify Installation Browse Official Documentation (optional) Download \u00b6 At the time of writing, the Net Core SDK version is 2.2.101 . Follow the download link listed above. Select the latest version available. Also, ensure you are using the SDK installer and NOT the Runtime installer, and it is 64-bit. Installation Steps \u00b6 Browse to the installer download location, double-click the installer, then click the install button . Start Installer Allow the installation to proceed Installer Progress At installation conclusion, close the installer. Close Installer Verify Installation \u00b6 After closing the installer, open a Windows Command Prompt . Test the installation using the following command: dotnet --info Validate Results NOTE - As illustrated in the the above image, multiple SDK installations have occurred. This is OK , and only adds additional frameworks to your system. This is the normal release method for Net Core SDK and Run-Times. This concludes the Net Core SDK Installation . Next Step \u00b6 Proceed to ==> Install VS Code","title":"1. NetCore"},{"location":"windows/Install-Net-Core-SDK/#install-netcore-sdk","text":"Application Data Name Microsoft Net Core SDK Version 2.2.101 Arch 64 bit Description Net Core for building websites, services, and console apps.","title":"Install NetCore SDK"},{"location":"windows/Install-Net-Core-SDK/#helpful-links","text":"Website : Welcome to ASP.NET Core Reference, Documentation, and Videos Getting Started Tutorials","title":"Helpful Links"},{"location":"windows/Install-Net-Core-SDK/#installation","text":"Download Net Core SDK Installation Steps Verify Installation Browse Official Documentation (optional)","title":"Installation"},{"location":"windows/Install-Net-Core-SDK/#download","text":"At the time of writing, the Net Core SDK version is 2.2.101 . Follow the download link listed above. Select the latest version available. Also, ensure you are using the SDK installer and NOT the Runtime installer, and it is 64-bit.","title":"Download"},{"location":"windows/Install-Net-Core-SDK/#installation-steps","text":"Browse to the installer download location, double-click the installer, then click the install button . Start Installer Allow the installation to proceed Installer Progress At installation conclusion, close the installer. Close Installer","title":"Installation Steps"},{"location":"windows/Install-Net-Core-SDK/#verify-installation","text":"After closing the installer, open a Windows Command Prompt . Test the installation using the following command: dotnet --info Validate Results NOTE - As illustrated in the the above image, multiple SDK installations have occurred. This is OK , and only adds additional frameworks to your system. This is the normal release method for Net Core SDK and Run-Times. This concludes the Net Core SDK Installation .","title":"Verify Installation"},{"location":"windows/Install-Net-Core-SDK/#next-step","text":"Proceed to ==> Install VS Code","title":"Next Step"},{"location":"windows/Install-PostgreSQL/","text":"Optional - Install PostgreSQL \u00b6 Application Data Name PostgreSQL Version 10.4+ Arch 64 bit Description Advanced High Performance Relational Database PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. -- The PostgreSQL Global Development Group, Postgres.org Background \u00b6 PostgreSQL is highly configuregable; from it's procedural language support, through to it's extensinve Roles and Permission structure, installation can go from simple to extremely complex. For the purposes of JTSDK usage, and the vast majority of Radio Data Store activity, the defualt installaiton procedure will suffice for most needs. If users find themselves in need of advanced features, the installed instance can easily be extended to accomodate many advanced features without a great deal of difficulity. Helpful Links \u00b6 Website Documentation Tutorials-1 Tutorials-2 PostgreSQL Cheat Sheet Download \u00b6 PostgreSQL EDB Installer JTSDK Third Party Installer Package Both downloads provide the same installer, and reflect the installation steps below. Which to use is entirely up to the end-user. Installation \u00b6 Browse to, then double-click the downloaded PostgreSQL EDB Installer , and follow the steps below. Welcome Screen \u00b6 Select next to continue. Welcome Screen Installation Directory \u00b6 IMPORTANT: The Installation Directory is critical. Use the table below to set the location. # For C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\PostgreSQL\\10 # For D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\PostgreSQL\\10 # If another drive is used, substitute the drive letter for one # of the examples above. Installation Directory Select Components \u00b6 Stack Builder provides a number of advanced application tools and is not recommended for the first time user, nor first run installation. Advanced tooling can always be added later. [X] PostgreSQL Server (required) [X] pgAdmin4 (required) [ ] Stack Builder ( not recommended ) [X] Command Line Tools (required) Select Components Data Directory \u00b6 IMPORTANT: The Data Directory is critical. Use the table below to set the location. The database can be moved procedurally post-install if the size grows to an unmanageable level for the current drive space. For most users, the locations listed below should be adequate. When uninstalling PostgreSQL, this folder does not get removed, thus your data will remain safe. # For C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\PostgreSQL\\10\\data # For D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\PostgreSQL\\10\\data # If another drive is used, substitute the drive letter for one # of the examples above. Data Directory Postgres Password \u00b6 The default user in a new PostgreSQL installation is named postgres . The default database is also named postgres . For local development purposes, there is little need for high-security. To make things easy for development and testing, most use a default password of postgres also. This setup results in the following: Host.......: localhost Port.......: 5432 Username...: postgres Password...: postgres Database...: postgres Postgres Password Server Port \u00b6 Unless you intend to run multiple servers on multiple ports, it's highly recommended to use the default PostgreSQL Port of: 5432 . Server Port Advanced Options \u00b6 Unless you are familiar with PostgreSQL Advanced Options , it's recommended to leave this setting as [Default locale] Advanced Options Pre Installation Summary \u00b6 Verify the installation parameters are what you intend, then next to continue. Pre Installation Summary Finish Installation \u00b6 If the installation finished without error, you now have a PostgreSQL database running on your system with the same parameters as mentioned in the Postgres Password Section . Host.......: localhost Port.......: 5432 Username...: postgres Password...: postgres Database...: postgres Finish Installation This concludes the PostgreSQL Installation . Additional database information, tests, and additional code snippet information will be posted at JTSDK@Groups.io . Next Step \u00b6 Proceed to ==> Database Tools Installation","title":"PostgreSQL"},{"location":"windows/Install-PostgreSQL/#optional-install-postgresql","text":"Application Data Name PostgreSQL Version 10.4+ Arch 64 bit Description Advanced High Performance Relational Database PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. -- The PostgreSQL Global Development Group, Postgres.org","title":"Optional - Install PostgreSQL"},{"location":"windows/Install-PostgreSQL/#background","text":"PostgreSQL is highly configuregable; from it's procedural language support, through to it's extensinve Roles and Permission structure, installation can go from simple to extremely complex. For the purposes of JTSDK usage, and the vast majority of Radio Data Store activity, the defualt installaiton procedure will suffice for most needs. If users find themselves in need of advanced features, the installed instance can easily be extended to accomodate many advanced features without a great deal of difficulity.","title":"Background"},{"location":"windows/Install-PostgreSQL/#helpful-links","text":"Website Documentation Tutorials-1 Tutorials-2 PostgreSQL Cheat Sheet","title":"Helpful Links"},{"location":"windows/Install-PostgreSQL/#download","text":"PostgreSQL EDB Installer JTSDK Third Party Installer Package Both downloads provide the same installer, and reflect the installation steps below. Which to use is entirely up to the end-user.","title":"Download"},{"location":"windows/Install-PostgreSQL/#installation","text":"Browse to, then double-click the downloaded PostgreSQL EDB Installer , and follow the steps below.","title":"Installation"},{"location":"windows/Install-PostgreSQL/#welcome-screen","text":"Select next to continue. Welcome Screen","title":"Welcome Screen"},{"location":"windows/Install-PostgreSQL/#installation-directory","text":"IMPORTANT: The Installation Directory is critical. Use the table below to set the location. # For C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\PostgreSQL\\10 # For D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\PostgreSQL\\10 # If another drive is used, substitute the drive letter for one # of the examples above. Installation Directory","title":"Installation Directory"},{"location":"windows/Install-PostgreSQL/#select-components","text":"Stack Builder provides a number of advanced application tools and is not recommended for the first time user, nor first run installation. Advanced tooling can always be added later. [X] PostgreSQL Server (required) [X] pgAdmin4 (required) [ ] Stack Builder ( not recommended ) [X] Command Line Tools (required) Select Components","title":"Select Components"},{"location":"windows/Install-PostgreSQL/#data-directory","text":"IMPORTANT: The Data Directory is critical. Use the table below to set the location. The database can be moved procedurally post-install if the size grows to an unmanageable level for the current drive space. For most users, the locations listed below should be adequate. When uninstalling PostgreSQL, this folder does not get removed, thus your data will remain safe. # For C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\PostgreSQL\\10\\data # For D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\PostgreSQL\\10\\data # If another drive is used, substitute the drive letter for one # of the examples above. Data Directory","title":"Data Directory"},{"location":"windows/Install-PostgreSQL/#postgres-password","text":"The default user in a new PostgreSQL installation is named postgres . The default database is also named postgres . For local development purposes, there is little need for high-security. To make things easy for development and testing, most use a default password of postgres also. This setup results in the following: Host.......: localhost Port.......: 5432 Username...: postgres Password...: postgres Database...: postgres Postgres Password","title":"Postgres Password"},{"location":"windows/Install-PostgreSQL/#server-port","text":"Unless you intend to run multiple servers on multiple ports, it's highly recommended to use the default PostgreSQL Port of: 5432 . Server Port","title":"Server Port"},{"location":"windows/Install-PostgreSQL/#advanced-options","text":"Unless you are familiar with PostgreSQL Advanced Options , it's recommended to leave this setting as [Default locale] Advanced Options","title":"Advanced Options"},{"location":"windows/Install-PostgreSQL/#pre-installation-summary","text":"Verify the installation parameters are what you intend, then next to continue. Pre Installation Summary","title":"Pre Installation Summary"},{"location":"windows/Install-PostgreSQL/#finish-installation","text":"If the installation finished without error, you now have a PostgreSQL database running on your system with the same parameters as mentioned in the Postgres Password Section . Host.......: localhost Port.......: 5432 Username...: postgres Password...: postgres Database...: postgres Finish Installation This concludes the PostgreSQL Installation . Additional database information, tests, and additional code snippet information will be posted at JTSDK@Groups.io .","title":"Finish Installation"},{"location":"windows/Install-PostgreSQL/#next-step","text":"Proceed to ==> Database Tools Installation","title":"Next Step"},{"location":"windows/Install-Prerequisites/","text":"Prerequisites \u00b6 Application Purpose Net Core SDK Cross Platform Framework based on C-Charp Visual Studio Code Powerful Cross-Platform Editor Git Client Distributed Version Control System Client Considerations \u00b6 In order to checkout and compile the JTSDK Net Core Utilities , users must have three applications / frameworks installed at the system level . The guides listed below are provided to assist users with installing the JTSDK Tool Chain prerequisite applications. All three components are installed to the Default System Install Location(s) if the guides are followed. IMPORTANT - It is up to the user where these packages are installed. However, unless there are specific reasons to NOT use a default install location, its highly advisable to use the recommended installer location(s). All three packages must be available from a standard Windows / Linux Console. If not, users should add--either locally or system wide--the path location(s) which allows access from the command-line. Using the commands git --version , dotnet --info , and code --version should all render without error from their respective console. Installation Order \u00b6 While not critical, the order below should be followed: Install .Net Core SDK Install VS Code Editor Install Git","title":"Prerequisites"},{"location":"windows/Install-Prerequisites/#prerequisites","text":"Application Purpose Net Core SDK Cross Platform Framework based on C-Charp Visual Studio Code Powerful Cross-Platform Editor Git Client Distributed Version Control System Client","title":"Prerequisites"},{"location":"windows/Install-Prerequisites/#considerations","text":"In order to checkout and compile the JTSDK Net Core Utilities , users must have three applications / frameworks installed at the system level . The guides listed below are provided to assist users with installing the JTSDK Tool Chain prerequisite applications. All three components are installed to the Default System Install Location(s) if the guides are followed. IMPORTANT - It is up to the user where these packages are installed. However, unless there are specific reasons to NOT use a default install location, its highly advisable to use the recommended installer location(s). All three packages must be available from a standard Windows / Linux Console. If not, users should add--either locally or system wide--the path location(s) which allows access from the command-line. Using the commands git --version , dotnet --info , and code --version should all render without error from their respective console.","title":"Considerations"},{"location":"windows/Install-Prerequisites/#installation-order","text":"While not critical, the order below should be followed: Install .Net Core SDK Install VS Code Editor Install Git","title":"Installation Order"},{"location":"windows/Install-Python/","text":"Install Anaconda Python \u00b6 Application Data Name Anaconda Python Version 2018.12 Arch 64-bit Description Python Data Science Distribution System Anaconda Python is a free, easy-to-install, package manager, environment manager and Python distribution with a collection of 1,000+ open source packages with free community support. Anaconda is platform-agnostic, so you can use it whether you are on Windows, MacOS or Linux. -- Anaconda, Inc., www.anaconda.com Background \u00b6 The JTSDK-Tools no longer supports building WSJT, or WSPR (Python Based Projects). For those wishing to develop those applications, JTSDK v2 should be used. Helpful Links \u00b6 Anaconda Documentation Managing Environments Download \u00b6 Anaconda Python Installer 64-bit Use the 64-bit installer, if you are on a 64-bit system, and save to a location you can easily access. Optional \u00b6 If you already have JTSDK-Tools installed, as you are upgrading, use can wget to download the file from the the JTSDK-Tools environment # Using wget cd /d (C|D):\\JTSDK-Tools\\tmp wget -c https://repo.continuum.io/archive/Anaconda3-2018.12-Windows-x86_64.exe Installation \u00b6 Browse to, then double-click the downloaded Anaconda3 Installer , and follow the steps below. Welcome Screen \u00b6 Select next to continue. Welcome Screen License Agreement \u00b6 Accept and continue. License Agreement Select Installation Type \u00b6 Just Me, and continue. Select Installation Type Installation Location \u00b6 IMPORTANT: The Installation Directory is critical. Use the data below to set the location. # C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\Anaconda3 # D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\Anaconda3 # If another drive is used, substitute the drive letter for one # of the examples above. Choose Installation Location Advanced Options \u00b6 [ ] Add Anaconda to my PATH Environment Variable ( Not Recommended ) [X] Register Anaconda as my default Python 3.6 ( Recommended ) Advanced Installation Options Installation Progress \u00b6 Installation Progress Install Complete \u00b6 Install Complete Install VS Code \u00b6 If you have already Installed VS Code , you can skip this step. If not, Anaconda will install it for you. Install VS Code Optional Reading \u00b6 Select if you want to read more information about Anaconda Python. Optional Reading Upgrading Anaconda \u00b6 The Anaconda installation provides a specific command shell setup with all the correct paths to use and create virtual environments. There exists a shortcut in the Windows Start/Program menu. Browse to your Program Menu, and select Anaconda3 (64-bit) . Update Package Manager \u00b6 # At the Anaconda Prompt, type: conda update conda Upgrade Anaconda Package Manager Update All Packages \u00b6 After upgrading the conda package manager , upgrade all all packages. NOTE: Depending on the installer used, the number of packages to be updated can vary significantly. Older installers will obviously have more updates. More than likely, there will be few, if any, packages that need to be upgraded when using a new installer. # Upgrade All Packages In the (base) environment conda upgrade --all Upgrade Anaconda Packages Check Python Version \u00b6 In the same Anaconda Prompt, check the default (base) Python version. python -V Check Python version Create Virtual Environment \u00b6 In the same Anaconda Prompt, create a jtsdk-Py virtual environment. conda create -n jtsdk-py JTSDK-Py Virtial ENV List Environments \u00b6 In the same Anaconda Prompt, list all available virtual environments, switch to ( jtsdk-py ), then back to ( base ) environment. # LList the environments, then activate jtsdk-py conda env list # Activate conda activate jtsdk-py # Display Python version python -V # Deactivate conda deactivate List Python Virtual Environments This concludes the Anaconda3 Python installation. Next Step \u00b6 Proceed to ==> AsciiDoctor Installation","title":"4. Python"},{"location":"windows/Install-Python/#install-anaconda-python","text":"Application Data Name Anaconda Python Version 2018.12 Arch 64-bit Description Python Data Science Distribution System Anaconda Python is a free, easy-to-install, package manager, environment manager and Python distribution with a collection of 1,000+ open source packages with free community support. Anaconda is platform-agnostic, so you can use it whether you are on Windows, MacOS or Linux. -- Anaconda, Inc., www.anaconda.com","title":"Install Anaconda Python"},{"location":"windows/Install-Python/#background","text":"The JTSDK-Tools no longer supports building WSJT, or WSPR (Python Based Projects). For those wishing to develop those applications, JTSDK v2 should be used.","title":"Background"},{"location":"windows/Install-Python/#helpful-links","text":"Anaconda Documentation Managing Environments","title":"Helpful Links"},{"location":"windows/Install-Python/#download","text":"Anaconda Python Installer 64-bit Use the 64-bit installer, if you are on a 64-bit system, and save to a location you can easily access.","title":"Download"},{"location":"windows/Install-Python/#optional","text":"If you already have JTSDK-Tools installed, as you are upgrading, use can wget to download the file from the the JTSDK-Tools environment # Using wget cd /d (C|D):\\JTSDK-Tools\\tmp wget -c https://repo.continuum.io/archive/Anaconda3-2018.12-Windows-x86_64.exe","title":"Optional"},{"location":"windows/Install-Python/#installation","text":"Browse to, then double-click the downloaded Anaconda3 Installer , and follow the steps below.","title":"Installation"},{"location":"windows/Install-Python/#welcome-screen","text":"Select next to continue. Welcome Screen","title":"Welcome Screen"},{"location":"windows/Install-Python/#license-agreement","text":"Accept and continue. License Agreement","title":"License Agreement"},{"location":"windows/Install-Python/#select-installation-type","text":"Just Me, and continue. Select Installation Type","title":"Select Installation Type"},{"location":"windows/Install-Python/#installation-location","text":"IMPORTANT: The Installation Directory is critical. Use the data below to set the location. # C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\Anaconda3 # D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\Anaconda3 # If another drive is used, substitute the drive letter for one # of the examples above. Choose Installation Location","title":"Installation Location"},{"location":"windows/Install-Python/#advanced-options","text":"[ ] Add Anaconda to my PATH Environment Variable ( Not Recommended ) [X] Register Anaconda as my default Python 3.6 ( Recommended ) Advanced Installation Options","title":"Advanced Options"},{"location":"windows/Install-Python/#installation-progress","text":"Installation Progress","title":"Installation Progress"},{"location":"windows/Install-Python/#install-complete","text":"Install Complete","title":"Install Complete"},{"location":"windows/Install-Python/#install-vs-code","text":"If you have already Installed VS Code , you can skip this step. If not, Anaconda will install it for you. Install VS Code","title":"Install VS Code"},{"location":"windows/Install-Python/#optional-reading","text":"Select if you want to read more information about Anaconda Python. Optional Reading","title":"Optional Reading"},{"location":"windows/Install-Python/#upgrading-anaconda","text":"The Anaconda installation provides a specific command shell setup with all the correct paths to use and create virtual environments. There exists a shortcut in the Windows Start/Program menu. Browse to your Program Menu, and select Anaconda3 (64-bit) .","title":"Upgrading Anaconda"},{"location":"windows/Install-Python/#update-package-manager","text":"# At the Anaconda Prompt, type: conda update conda Upgrade Anaconda Package Manager","title":"Update Package Manager"},{"location":"windows/Install-Python/#update-all-packages","text":"After upgrading the conda package manager , upgrade all all packages. NOTE: Depending on the installer used, the number of packages to be updated can vary significantly. Older installers will obviously have more updates. More than likely, there will be few, if any, packages that need to be upgraded when using a new installer. # Upgrade All Packages In the (base) environment conda upgrade --all Upgrade Anaconda Packages","title":"Update All Packages"},{"location":"windows/Install-Python/#check-python-version","text":"In the same Anaconda Prompt, check the default (base) Python version. python -V Check Python version","title":"Check Python Version"},{"location":"windows/Install-Python/#create-virtual-environment","text":"In the same Anaconda Prompt, create a jtsdk-Py virtual environment. conda create -n jtsdk-py JTSDK-Py Virtial ENV","title":"Create Virtual Environment"},{"location":"windows/Install-Python/#list-environments","text":"In the same Anaconda Prompt, list all available virtual environments, switch to ( jtsdk-py ), then back to ( base ) environment. # LList the environments, then activate jtsdk-py conda env list # Activate conda activate jtsdk-py # Display Python version python -V # Deactivate conda deactivate List Python Virtual Environments This concludes the Anaconda3 Python installation.","title":"List Environments"},{"location":"windows/Install-Python/#next-step","text":"Proceed to ==> AsciiDoctor Installation","title":"Next Step"},{"location":"windows/Install-Qt/","text":"Install Qt \u00b6 Application Data Name Qt Version Rolling Arch 32 bit Description Cross-Platform Development Framework Qt is much more than just a cross-platform SDK - it's a technology strategy that lets you quickly and cost-effectively design, develop, deploy, and maintain software while delivering a seamless user experience across all devices. -- The Qt Company, www.qt.io Background \u00b6 Users have a number of choices as to how Qt is installed. However, for the purpose of JTSDK , the primary method used is through the use of the Qt installer. There are two installer types: Offline Installer : which includes all binaries, docs, source code, and GNU tool-chain's used to compile each version of Qt. The installer download size typically ranges from 1.0 GB to 2.0 GB . Online Installer : downloads only the targets the user selects. The installer size ranges from 20 MB to 30 MB . However, the components are downloaded during the installation process, but only for selected components. In an effort to minimize the initial download size for users, option-2 (the Online Installer) is the preferred method used for setting up JTSDK , and the installer used for the Installation Walk-Through . Download \u00b6 Users can download the Qt Installer directly from Qt.io , or as part of the JTSDK Third Party Installer Package provided by this project. Either installer is acceptable. Download from Qt.io JTSDK Third Party Installer Package Installation \u00b6 Browse to, then double-click the downloaded Qt Online Installer , and follow the steps below. Welcome Screen \u00b6 Select next to continue. * Welcome Screen Select Next* Qt Account \u00b6 Select skip to continue. * Qt Account Select Skip* Qt Setup \u00b6 Select next to continue. Qt Setup Select Next Qt Update Meta Data \u00b6 No action required. Qt Update Meta Data Qt Installation Folder \u00b6 IMPORTANT: The Installation Folder is critical. Use the table below to set the location. File Association: This option is up to the end-user. If this instance of Qt is the only Qt installation on the system, there should be no harm in associating file types. If not, it's up to the user as to whether or not to associate file types. # For C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\Qt # For D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\Qt # If another drive is used, substitute the drive letter for one # of the examples above. Set Path and File Association Qt Component Selection \u00b6 In general, the Qt Installer can install any number of combinations for both components and tool chains. JTSDK is setup to utilize two combinations. The following components should be considers the bare-minimum. Anything above these items would be at the users discretion. As a side note, if more components are deemed necessary at a later date, the Qt Maintenance Tool cna be used to manage the installation. Qt Components Qt 5.9.5, MinGW 5.3.0 32 Bit Qt 5.5, MinGW 4.9.2 32 Bit Tool Chains MinGW 4.9.2 MinGW 5.3.0 The following Image shows a summary of required selections. Qt 5.9.5 Components \u00b6 Qt 5.9.5 Components Qt 5.5 Components \u00b6 Qt 5.5 Components Qt Tool Chains: 4.9.2 and 5.3.0 \u00b6 Qt Tool Chains: 4.9.2 and 5.3.0 Qt License Agreement \u00b6 Qt License Agreement Qt Startup Menu Shortcuts \u00b6 This is a user option, but it is recommended to keep Qt . Qt Startup Menu Shortcuts Qt Ready to Install \u00b6 Select next to continue. Qt Ready to Install Maintenance Tool Configuration \u00b6 Select next to continue. Maintenance Tool Configuration Qt Launch \u00b6 To Ensure Qt is functioning properly, launch then close Qt . Qt Launch Qt Creator Verified \u00b6 Qt Launch This concludes the Qt Tools Installation . Next Step \u00b6 Proceed to ==> Core Apps Installation","title":"7. Qt Tools"},{"location":"windows/Install-Qt/#install-qt","text":"Application Data Name Qt Version Rolling Arch 32 bit Description Cross-Platform Development Framework Qt is much more than just a cross-platform SDK - it's a technology strategy that lets you quickly and cost-effectively design, develop, deploy, and maintain software while delivering a seamless user experience across all devices. -- The Qt Company, www.qt.io","title":"Install Qt"},{"location":"windows/Install-Qt/#background","text":"Users have a number of choices as to how Qt is installed. However, for the purpose of JTSDK , the primary method used is through the use of the Qt installer. There are two installer types: Offline Installer : which includes all binaries, docs, source code, and GNU tool-chain's used to compile each version of Qt. The installer download size typically ranges from 1.0 GB to 2.0 GB . Online Installer : downloads only the targets the user selects. The installer size ranges from 20 MB to 30 MB . However, the components are downloaded during the installation process, but only for selected components. In an effort to minimize the initial download size for users, option-2 (the Online Installer) is the preferred method used for setting up JTSDK , and the installer used for the Installation Walk-Through .","title":"Background"},{"location":"windows/Install-Qt/#download","text":"Users can download the Qt Installer directly from Qt.io , or as part of the JTSDK Third Party Installer Package provided by this project. Either installer is acceptable. Download from Qt.io JTSDK Third Party Installer Package","title":"Download"},{"location":"windows/Install-Qt/#installation","text":"Browse to, then double-click the downloaded Qt Online Installer , and follow the steps below.","title":"Installation"},{"location":"windows/Install-Qt/#welcome-screen","text":"Select next to continue. * Welcome Screen Select Next*","title":"Welcome Screen"},{"location":"windows/Install-Qt/#qt-account","text":"Select skip to continue. * Qt Account Select Skip*","title":"Qt Account"},{"location":"windows/Install-Qt/#qt-setup","text":"Select next to continue. Qt Setup Select Next","title":"Qt Setup"},{"location":"windows/Install-Qt/#qt-update-meta-data","text":"No action required. Qt Update Meta Data","title":"Qt Update Meta Data"},{"location":"windows/Install-Qt/#qt-installation-folder","text":"IMPORTANT: The Installation Folder is critical. Use the table below to set the location. File Association: This option is up to the end-user. If this instance of Qt is the only Qt installation on the system, there should be no harm in associating file types. If not, it's up to the user as to whether or not to associate file types. # For C-Drive Installation, set path to: C:\\JTSDK-Tools\\tools\\Qt # For D-Drive installation, set path to: D:\\JTSDK-Tools\\tools\\Qt # If another drive is used, substitute the drive letter for one # of the examples above. Set Path and File Association","title":"Qt Installation Folder"},{"location":"windows/Install-Qt/#qt-component-selection","text":"In general, the Qt Installer can install any number of combinations for both components and tool chains. JTSDK is setup to utilize two combinations. The following components should be considers the bare-minimum. Anything above these items would be at the users discretion. As a side note, if more components are deemed necessary at a later date, the Qt Maintenance Tool cna be used to manage the installation. Qt Components Qt 5.9.5, MinGW 5.3.0 32 Bit Qt 5.5, MinGW 4.9.2 32 Bit Tool Chains MinGW 4.9.2 MinGW 5.3.0 The following Image shows a summary of required selections.","title":"Qt Component Selection"},{"location":"windows/Install-Qt/#qt-595-components","text":"Qt 5.9.5 Components","title":"Qt 5.9.5 Components"},{"location":"windows/Install-Qt/#qt-55-components","text":"Qt 5.5 Components","title":"Qt 5.5 Components"},{"location":"windows/Install-Qt/#qt-tool-chains-492-and-530","text":"Qt Tool Chains: 4.9.2 and 5.3.0","title":"Qt Tool Chains: 4.9.2 and 5.3.0"},{"location":"windows/Install-Qt/#qt-license-agreement","text":"Qt License Agreement","title":"Qt License Agreement"},{"location":"windows/Install-Qt/#qt-startup-menu-shortcuts","text":"This is a user option, but it is recommended to keep Qt . Qt Startup Menu Shortcuts","title":"Qt Startup Menu Shortcuts"},{"location":"windows/Install-Qt/#qt-ready-to-install","text":"Select next to continue. Qt Ready to Install","title":"Qt Ready to Install"},{"location":"windows/Install-Qt/#maintenance-tool-configuration","text":"Select next to continue. Maintenance Tool Configuration","title":"Maintenance Tool Configuration"},{"location":"windows/Install-Qt/#qt-launch","text":"To Ensure Qt is functioning properly, launch then close Qt . Qt Launch","title":"Qt Launch"},{"location":"windows/Install-Qt/#qt-creator-verified","text":"Qt Launch This concludes the Qt Tools Installation .","title":"Qt Creator Verified"},{"location":"windows/Install-Qt/#next-step","text":"Proceed to ==> Core Apps Installation","title":"Next Step"},{"location":"windows/Install-Redis/","text":"Optional - Install Redis \u00b6 Application Data Name Redis Version Use Latest Arch 64 bit Description Redis is an open source in-memory data structure store Redis is an open source in-memory data structure store that is designed to be fast and simple . The name is an acronym for Remote Dictionary Server (pronounced \"red-iss\"), referencing the networked client-server and key-value data models that Redis uses. Built for real-time performance most requests to Redis complete in less than a millisecond , allowing a single server to handle millions of concurrent requests every second. Redis is designed for simplicity; it\u2019s easy to use and extends the developer's toolbox by managing a distributed store of data structures used by applications. Redis includes everything needed to run it\u2014whether on a developer's workstation or in a highly available large-scale production environment\u2014and is renowned for its rock-solid stability. It is used as a database, cache and a message broker wherever performance is key. -- Redis Labs Table of Contents \u00b6 System Requirements Base System Hardware Windows Installation vi Docker Container Native Linux and WSL Installation Requirements \u00b6 Redis runs best on Linux | Unix based systems, and it is NOT recommended for Native Windows. See Reasons Why Not Windows for a more in-depth explanation. If you need assistance installing WSL , see Installing Windows Subsystem for Linux Installation from the JTSDK Net Core Project Wiki . Base System Hardware \u00b6 Multi-Core CPU (more is better) At least 500MB free-memory (more is better) An empty instance uses ~ 3MB of memory. 1 Million small Keys -> String Value pairs use ~ 85MB of memory. 1 Million Keys -> Hash value, representing an object with 5 fields, use ~ 160 MB of memory. 10MB, or more, Disk Space for initial installation Internet Access is a must have for installation NOTE: While it's possible to run redis-server on small embedded devices such as the RPI 2|3 or similar ARM based computers, performance for demanding applications will be sub-par. If you want to take advantage of Redis capabilities, using embedded devices is not the preferred approach. Install via Docker Container \u00b6 By far, the easiest way to test applications with Redis on Windows is by using a pre-build Docker Container. It's quick, easy, and maintained by the Docker community. To use Docker Containers, you must first Install Docker, and preferably, create a Docker Hub Account (why not, it's free). Follow the next few steps to create your account, and install docker Create a Docker Hub Account Install Docker Community Edition (CE) for Windows NOTE: This is a good time to check out the Getting Started and read through their FAQ . Now that you've Installed Docker , you are ready to pull and run the 5.0-Alpine Docker image. There are many Docker Redis Images to choose from, but, I find the small footprint ( ~95MB ) of Alpine to be perfect for application testing. Install Steps \u00b6 Open a Windows Console (Windows CMD or Powershell), and type the following: NOTE: make sure Docker is running before issuing the following command(s). # In Windows Powershell or CMD Console, type: # # Note: 5.0.3 may not be the latest revision. Always check for the latest version # at: https://hub.docker.com/_/redis/ and substitute as required. docker run --name 5.0.3-alpine -p 6379:6379 -d redis You should now have a Redis Docker Image running on your system. To do a few checks, run the following commands. In Windows Powershell or CMD Console: # Check Docker disk usage, type docker system df Get the Redis Alpine Container Information \u00b6 # Grab the Container Information, type\" docker ps # Check the Image, Status, Port and Name. Should be similar to: Image....: redis Status...: Up xx minutes Ports....: 0.0.0.0:6379->6379/tcp Name.....: 5.0.3-alpine This concludes the Docker Redis Installation section. If you reboot your system. re-run the install command from able to re-start the instance. Linux and WSL Installation \u00b6 This installation process describes using Ubuntu 16.04 thru 18.04 or Windows Subsystem Linux . Other Linux based distributions will be similar. There is NO need for a Password, Port re-assignment, IP address re-assignment, nor HTTPS setup. A default, out-of-box install, is all that is required for testing. Ubuntu or WSL \u00b6 Open WSL or Linux Terminal and type the following in the shell: # In the bash terminal (for Debian|Ubuntu based systems) sudo apt update sudo apt install redis-server sudo service redis-server start sudo service redis-service status redis-server --version If the above commands were successful, you should have the following results: NOTE: With WSL, each time you close and re-open the session, you must restart any servers you wish to run as they do not automatically start. On a normal Linux instance, this is of no concern as they are managed by system control. *Redis Startup * Initial Testing \u00b6 The following tests your ability to enter and query small <key>:<value> pairs in the new Redis Server . All commands are in the terminal At the command prompt type redis-cli At the redis prompt type: # Note: 127.0.0.1:6379> is the redis prompt, you do not type that part. 127.0.0.1:6379> ping # Output should be: pong Add a <key>:<value> pair 127.0.0.1:6379> set test \"Redis Is Working!!\" # Output should be: OK Retrieve the <key>:<value> pair with: 127.0.0.1:6379> get test # Output should be: \"Redis Is Working!!\" Exit the redis-cli client 127.0.0.1:6379> exit # You should now be back at the Linux prompt Restart Redis Server # At the Linux prompt, type sudo service redis-server restart Open Redis Client and Check previous data redis-cli 127.0.0.1:6379> get test # Output should be: \"Redis Is Working!!\" Exit the Redis CLI # Exit redis-cli 127.0.0.1:6379> exit # You should now be back at the Linux prompt Test Result Summary \u00b6 Test Results Conclusion \u00b6 This concludes the basic installation and testing of the redis-server . Redis is a highly capable <key>:<value> store used by thousands of enterprise applications. For further learning, checkout the following resources: Redis explained in 5 minutes Zero to Master in 30 minutes Introduction to Redis Redis Tutorials by Tutorials Point","title":"Redis"},{"location":"windows/Install-Redis/#optional-install-redis","text":"Application Data Name Redis Version Use Latest Arch 64 bit Description Redis is an open source in-memory data structure store Redis is an open source in-memory data structure store that is designed to be fast and simple . The name is an acronym for Remote Dictionary Server (pronounced \"red-iss\"), referencing the networked client-server and key-value data models that Redis uses. Built for real-time performance most requests to Redis complete in less than a millisecond , allowing a single server to handle millions of concurrent requests every second. Redis is designed for simplicity; it\u2019s easy to use and extends the developer's toolbox by managing a distributed store of data structures used by applications. Redis includes everything needed to run it\u2014whether on a developer's workstation or in a highly available large-scale production environment\u2014and is renowned for its rock-solid stability. It is used as a database, cache and a message broker wherever performance is key. -- Redis Labs","title":"Optional - Install Redis"},{"location":"windows/Install-Redis/#table-of-contents","text":"System Requirements Base System Hardware Windows Installation vi Docker Container Native Linux and WSL Installation","title":"Table of Contents"},{"location":"windows/Install-Redis/#requirements","text":"Redis runs best on Linux | Unix based systems, and it is NOT recommended for Native Windows. See Reasons Why Not Windows for a more in-depth explanation. If you need assistance installing WSL , see Installing Windows Subsystem for Linux Installation from the JTSDK Net Core Project Wiki .","title":"Requirements"},{"location":"windows/Install-Redis/#base-system-hardware","text":"Multi-Core CPU (more is better) At least 500MB free-memory (more is better) An empty instance uses ~ 3MB of memory. 1 Million small Keys -> String Value pairs use ~ 85MB of memory. 1 Million Keys -> Hash value, representing an object with 5 fields, use ~ 160 MB of memory. 10MB, or more, Disk Space for initial installation Internet Access is a must have for installation NOTE: While it's possible to run redis-server on small embedded devices such as the RPI 2|3 or similar ARM based computers, performance for demanding applications will be sub-par. If you want to take advantage of Redis capabilities, using embedded devices is not the preferred approach.","title":"Base System Hardware"},{"location":"windows/Install-Redis/#install-via-docker-container","text":"By far, the easiest way to test applications with Redis on Windows is by using a pre-build Docker Container. It's quick, easy, and maintained by the Docker community. To use Docker Containers, you must first Install Docker, and preferably, create a Docker Hub Account (why not, it's free). Follow the next few steps to create your account, and install docker Create a Docker Hub Account Install Docker Community Edition (CE) for Windows NOTE: This is a good time to check out the Getting Started and read through their FAQ . Now that you've Installed Docker , you are ready to pull and run the 5.0-Alpine Docker image. There are many Docker Redis Images to choose from, but, I find the small footprint ( ~95MB ) of Alpine to be perfect for application testing.","title":"Install via Docker Container"},{"location":"windows/Install-Redis/#install-steps","text":"Open a Windows Console (Windows CMD or Powershell), and type the following: NOTE: make sure Docker is running before issuing the following command(s). # In Windows Powershell or CMD Console, type: # # Note: 5.0.3 may not be the latest revision. Always check for the latest version # at: https://hub.docker.com/_/redis/ and substitute as required. docker run --name 5.0.3-alpine -p 6379:6379 -d redis You should now have a Redis Docker Image running on your system. To do a few checks, run the following commands. In Windows Powershell or CMD Console: # Check Docker disk usage, type docker system df","title":"Install Steps"},{"location":"windows/Install-Redis/#get-the-redis-alpine-container-information","text":"# Grab the Container Information, type\" docker ps # Check the Image, Status, Port and Name. Should be similar to: Image....: redis Status...: Up xx minutes Ports....: 0.0.0.0:6379->6379/tcp Name.....: 5.0.3-alpine This concludes the Docker Redis Installation section. If you reboot your system. re-run the install command from able to re-start the instance.","title":"Get the Redis Alpine Container Information"},{"location":"windows/Install-Redis/#linux-and-wsl-installation","text":"This installation process describes using Ubuntu 16.04 thru 18.04 or Windows Subsystem Linux . Other Linux based distributions will be similar. There is NO need for a Password, Port re-assignment, IP address re-assignment, nor HTTPS setup. A default, out-of-box install, is all that is required for testing.","title":"Linux and WSL Installation"},{"location":"windows/Install-Redis/#ubuntu-or-wsl","text":"Open WSL or Linux Terminal and type the following in the shell: # In the bash terminal (for Debian|Ubuntu based systems) sudo apt update sudo apt install redis-server sudo service redis-server start sudo service redis-service status redis-server --version If the above commands were successful, you should have the following results: NOTE: With WSL, each time you close and re-open the session, you must restart any servers you wish to run as they do not automatically start. On a normal Linux instance, this is of no concern as they are managed by system control. *Redis Startup *","title":"Ubuntu or WSL"},{"location":"windows/Install-Redis/#initial-testing","text":"The following tests your ability to enter and query small <key>:<value> pairs in the new Redis Server . All commands are in the terminal At the command prompt type redis-cli At the redis prompt type: # Note: 127.0.0.1:6379> is the redis prompt, you do not type that part. 127.0.0.1:6379> ping # Output should be: pong Add a <key>:<value> pair 127.0.0.1:6379> set test \"Redis Is Working!!\" # Output should be: OK Retrieve the <key>:<value> pair with: 127.0.0.1:6379> get test # Output should be: \"Redis Is Working!!\" Exit the redis-cli client 127.0.0.1:6379> exit # You should now be back at the Linux prompt Restart Redis Server # At the Linux prompt, type sudo service redis-server restart Open Redis Client and Check previous data redis-cli 127.0.0.1:6379> get test # Output should be: \"Redis Is Working!!\" Exit the Redis CLI # Exit redis-cli 127.0.0.1:6379> exit # You should now be back at the Linux prompt","title":"Initial Testing"},{"location":"windows/Install-Redis/#test-result-summary","text":"Test Results","title":"Test Result Summary"},{"location":"windows/Install-Redis/#conclusion","text":"This concludes the basic installation and testing of the redis-server . Redis is a highly capable <key>:<value> store used by thousands of enterprise applications. For further learning, checkout the following resources: Redis explained in 5 minutes Zero to Master in 30 minutes Introduction to Redis Redis Tutorials by Tutorials Point","title":"Conclusion"},{"location":"windows/Install-VS-Code/","text":"Install VS Code \u00b6 Application Data Name Microsoft VS Code Version 1.25.1 Arch 64 bit Description Powerful Cross Platform Code Editor Helpful Links \u00b6 Download : VS Code Website : Visual Studio Code Reference, Documentation, and Videos Recommended Extensions Download \u00b6 At the time of writing, the VS Code version is 1.25.1 . Follow the download link listed above. Select the latest version available. Also, ensure you are using the 64-bit installer. Installation \u00b6 Browse to the installer download location, double-click the installer, then click the install button . Start Installer Accept License \u00b6 Accept License Install Path \u00b6 Unless you have a specific reason to install elsewhere, the default install location is recommended. Install path Start Menu Folder (default recommended) \u00b6 Start Menu Folder Additional Tasks \u00b6 The base recommendation, unless there is a reason otherwise, is to select all options. Additional Tasks Ready to Install \u00b6 Start Installer Finish Installation \u00b6 At the completion of the installation, select Launch Visual Studio Code and ensure the UI runs properly Verify Functionality Recommended Extensions \u00b6 There are literally hundreds of extensions for VS Code that enable a multitude of functionality. The list below are specific extensions recommended by Microsoft based on specific code types. Review each of the links below for your particular needs Language Extensions \u00b6 C# - Net Core Applications Python Java Markdown HTML and CSS Utility Extensions \u00b6 Git History Gitlens MSSQL Postgresql There are hundreds of powerful extensions. Learning them can take a fair amount of time, but, it is well worth the effort in the long run. This concludes the VS Code Installation . Next Step \u00b6 Proceed to ==> Git Client Install","title":"2. VS Code"},{"location":"windows/Install-VS-Code/#install-vs-code","text":"Application Data Name Microsoft VS Code Version 1.25.1 Arch 64 bit Description Powerful Cross Platform Code Editor","title":"Install VS Code"},{"location":"windows/Install-VS-Code/#helpful-links","text":"Download : VS Code Website : Visual Studio Code Reference, Documentation, and Videos Recommended Extensions","title":"Helpful Links"},{"location":"windows/Install-VS-Code/#download","text":"At the time of writing, the VS Code version is 1.25.1 . Follow the download link listed above. Select the latest version available. Also, ensure you are using the 64-bit installer.","title":"Download"},{"location":"windows/Install-VS-Code/#installation","text":"Browse to the installer download location, double-click the installer, then click the install button . Start Installer","title":"Installation"},{"location":"windows/Install-VS-Code/#accept-license","text":"Accept License","title":"Accept License"},{"location":"windows/Install-VS-Code/#install-path","text":"Unless you have a specific reason to install elsewhere, the default install location is recommended. Install path","title":"Install Path"},{"location":"windows/Install-VS-Code/#start-menu-folder-default-recommended","text":"Start Menu Folder","title":"Start Menu Folder (default recommended)"},{"location":"windows/Install-VS-Code/#additional-tasks","text":"The base recommendation, unless there is a reason otherwise, is to select all options. Additional Tasks","title":"Additional Tasks"},{"location":"windows/Install-VS-Code/#ready-to-install","text":"Start Installer","title":"Ready to Install"},{"location":"windows/Install-VS-Code/#finish-installation","text":"At the completion of the installation, select Launch Visual Studio Code and ensure the UI runs properly Verify Functionality","title":"Finish Installation"},{"location":"windows/Install-VS-Code/#recommended-extensions","text":"There are literally hundreds of extensions for VS Code that enable a multitude of functionality. The list below are specific extensions recommended by Microsoft based on specific code types. Review each of the links below for your particular needs","title":"Recommended Extensions"},{"location":"windows/Install-VS-Code/#language-extensions","text":"C# - Net Core Applications Python Java Markdown HTML and CSS","title":"Language Extensions"},{"location":"windows/Install-VS-Code/#utility-extensions","text":"Git History Gitlens MSSQL Postgresql There are hundreds of powerful extensions. Learning them can take a fair amount of time, but, it is well worth the effort in the long run. This concludes the VS Code Installation .","title":"Utility Extensions"},{"location":"windows/Install-VS-Code/#next-step","text":"Proceed to ==> Git Client Install","title":"Next Step"},{"location":"windows/Install-Visual-Studio/","text":"Optional - Install Visual Studio \u00b6 Application Data Name Visual Studio Version Community 2017+ Arch 64 bit Description Microsoft Visual Studio Integrated Development Environment Helpful Links \u00b6 Under Development Download \u00b6 Under Development Installation Walk-Through \u00b6 Under Development","title":"Visual Stuidio"},{"location":"windows/Install-Visual-Studio/#optional-install-visual-studio","text":"Application Data Name Visual Studio Version Community 2017+ Arch 64 bit Description Microsoft Visual Studio Integrated Development Environment","title":"Optional - Install Visual Studio"},{"location":"windows/Install-Visual-Studio/#helpful-links","text":"Under Development","title":"Helpful Links"},{"location":"windows/Install-Visual-Studio/#download","text":"Under Development","title":"Download"},{"location":"windows/Install-Visual-Studio/#installation-walk-through","text":"Under Development","title":"Installation Walk-Through"},{"location":"windows/Install-WSL/","text":"Optional - Install WSL \u00b6 Application Data Name Windows Subsystem Linux (WSL) Version User Select Arch 64 bit Description Windows Subsystem for Linux The Windows Subsystem for Linux lets developers run GNU/Linux environment -- including most command-line tools, utilities, and applications -- directly on Windows, unmodified, without the overhead of a virtual machine. -- Microsoft Corporation Background \u00b6 Running servers, high-performance databases, and other fork-type applications on Microsoft Windows can troublesome to setup and deploy. Thankfully, Microsoft has added a new feature through the App Store that allows users to run a several Linux Distributions directly from their Windows Desktop Environment. You can also run multiple instances, or different distributions ( multiple of multiples ). Installation \u00b6 Recommended distribution : Ubuntu 18.04 Read WSL Background Docs (2 min read) Follow the Installation Instructions Launch the WSL Distribution Read over User Accounts and Permissions (3 min read) Review Distribution Management (For Advanced Users) Helpful Resources \u00b6 Blogs and Video's Command-Line Blogs Posts and Articles Windows Interoperability","title":"WSL"},{"location":"windows/Install-WSL/#optional-install-wsl","text":"Application Data Name Windows Subsystem Linux (WSL) Version User Select Arch 64 bit Description Windows Subsystem for Linux The Windows Subsystem for Linux lets developers run GNU/Linux environment -- including most command-line tools, utilities, and applications -- directly on Windows, unmodified, without the overhead of a virtual machine. -- Microsoft Corporation","title":"Optional - Install WSL"},{"location":"windows/Install-WSL/#background","text":"Running servers, high-performance databases, and other fork-type applications on Microsoft Windows can troublesome to setup and deploy. Thankfully, Microsoft has added a new feature through the App Store that allows users to run a several Linux Distributions directly from their Windows Desktop Environment. You can also run multiple instances, or different distributions ( multiple of multiples ).","title":"Background"},{"location":"windows/Install-WSL/#installation","text":"Recommended distribution : Ubuntu 18.04 Read WSL Background Docs (2 min read) Follow the Installation Instructions Launch the WSL Distribution Read over User Accounts and Permissions (3 min read) Review Distribution Management (For Advanced Users)","title":"Installation"},{"location":"windows/Install-WSL/#helpful-resources","text":"Blogs and Video's Command-Line Blogs Posts and Articles Windows Interoperability","title":"Helpful Resources"},{"location":"windows/Third-Party-Installers/","text":"Optional Use \u00b6 Application Data Name TPI Version 3.0.0 Arch 32 and 64 bit Description Third Party Installer Information Background \u00b6 The following list of applications are included in the third-party-installer self-extracting package: MD5 Hash \u00b6 62244c0382b8142743622fdc3526eda7 ./Anaconda3-5.2.0-Windows-x86_64.exe a509dd288e237a153ef7f1aad830b3ae ./Git-2.18.0-64-bit.exe 200243d26ab9e161aec5cc390779f4ad ./dotnet-sdk-2.1.302-win-x64.exe b5d658e8bc71c56cd932090677cc36b5 ./eclipse-inst-win64.exe 9cbbfd628fea46c3ab8f5b648f376f49 ./jdk-8u172-windows-x64.exe 446e01504308c295c2b28affd527520d ./postgresql-10.4-1-windows-x64.exe 6376afb2b61aee0717f0e10bcf4119d7 ./qt-unified-windows-x86-3.0.5-online.exe SHA1 Hash \u00b6 555a4c6bbe0689a5e7418859c33e6cd6c0d982db ./Anaconda3-5.2.0-Windows-x86_64.exe 4fb3c3834bde920acb345dd410784a19df85735d ./Git-2.18.0-64-bit.exe c04e276d1375bc715eb461234f884133d52be552 ./dotnet-sdk-2.1.302-win-x64.exe ea15b6a3fcebc0db75220a8a2cb30399b5273871 ./eclipse-inst-win64.exe 5578168c1516bb0c5a22230044712dc26a708938 ./jdk-8u172-windows-x64.exe 270ba616143ca0f0466b8f7b71f6ed10095ff55e ./postgresql-10.4-1-windows-x64.exe fcd9209bd1e432d17d5aeeb16377d950f2517d5f ./qt-unified-windows-x86-3.0.5-online.exe","title":"Third Party Installers"},{"location":"windows/Third-Party-Installers/#optional-use","text":"Application Data Name TPI Version 3.0.0 Arch 32 and 64 bit Description Third Party Installer Information","title":"Optional Use"},{"location":"windows/Third-Party-Installers/#background","text":"The following list of applications are included in the third-party-installer self-extracting package:","title":"Background"},{"location":"windows/Third-Party-Installers/#md5-hash","text":"62244c0382b8142743622fdc3526eda7 ./Anaconda3-5.2.0-Windows-x86_64.exe a509dd288e237a153ef7f1aad830b3ae ./Git-2.18.0-64-bit.exe 200243d26ab9e161aec5cc390779f4ad ./dotnet-sdk-2.1.302-win-x64.exe b5d658e8bc71c56cd932090677cc36b5 ./eclipse-inst-win64.exe 9cbbfd628fea46c3ab8f5b648f376f49 ./jdk-8u172-windows-x64.exe 446e01504308c295c2b28affd527520d ./postgresql-10.4-1-windows-x64.exe 6376afb2b61aee0717f0e10bcf4119d7 ./qt-unified-windows-x86-3.0.5-online.exe","title":"MD5 Hash"},{"location":"windows/Third-Party-Installers/#sha1-hash","text":"555a4c6bbe0689a5e7418859c33e6cd6c0d982db ./Anaconda3-5.2.0-Windows-x86_64.exe 4fb3c3834bde920acb345dd410784a19df85735d ./Git-2.18.0-64-bit.exe c04e276d1375bc715eb461234f884133d52be552 ./dotnet-sdk-2.1.302-win-x64.exe ea15b6a3fcebc0db75220a8a2cb30399b5273871 ./eclipse-inst-win64.exe 5578168c1516bb0c5a22230044712dc26a708938 ./jdk-8u172-windows-x64.exe 270ba616143ca0f0466b8f7b71f6ed10095ff55e ./postgresql-10.4-1-windows-x64.exe fcd9209bd1e432d17d5aeeb16377d950f2517d5f ./qt-unified-windows-x86-3.0.5-online.exe","title":"SHA1 Hash"},{"location":"windows/release-notes/Release-Notes-3.0.1/","text":"Release Notes 3.0.1 \u00b6 Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. Prerequisite Tools Installation Core Tool Installation # Open a Windows Console, then change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Make a Source Directory mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-dotnet-core.git # Change Directories and Make Install cd jtsdk-dotnet-core make install Upgrade \u00b6 If the source clone is still present on the system, upgrading is the same as installation, with an additional pull command. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install This concludes the installation and / or upgrade for JTSDK Core Applications .","title":"3.0.1"},{"location":"windows/release-notes/Release-Notes-3.0.1/#release-notes-301","text":"Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. Prerequisite Tools Installation Core Tool Installation # Open a Windows Console, then change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Make a Source Directory mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-dotnet-core.git # Change Directories and Make Install cd jtsdk-dotnet-core make install","title":"Release Notes 3.0.1"},{"location":"windows/release-notes/Release-Notes-3.0.1/#upgrade","text":"If the source clone is still present on the system, upgrading is the same as installation, with an additional pull command. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install This concludes the installation and / or upgrade for JTSDK Core Applications .","title":"Upgrade"},{"location":"windows/release-notes/Release-Notes-3.0.2/","text":"Release Notes 3.0.2 \u00b6 .Net Core is now the primary framework used to control the environment and build for WSJT-X . As a result, several applications-name shortcuts have changed: Primary Commands \u00b6 jtenv is used to set various environment / build conditions jtconfig is used to config control build parameters jtbuild is used to compile WSJT-X msys2 launches the MSYS2 console for building Hamlib Optioinal Environment Commands \u00b6 jtenv-py -h if Anaconda Python is installed. jtenv-jv -h if jtsdk-java-env is installed. JTEnv Java Install \u00b6 NOTE - JTEnv Java requires both Java Tools and Java to be installed before building JTEnv Java. The jtenv-jv application has been converted to use to a stand-alone project jtsdk-java-apps and is not longer part of the .Net Core Installation (as a Java script). JTEnv Installation \u00b6 To install, test, and use jtenv-jv , perform the following steps: # Open JTSDK-Env, and change directories to (C|D):\\JTSDK-Tools cd /d (C|D):\\JTSDK-Tools # Make a Source Directory (if not already present) mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-java-env.git # Change Directories and Make Install cd jtsdk-java-env\\jtenv make clean make build make install # Test Installation jtenv-jv -h","title":"3.0.2"},{"location":"windows/release-notes/Release-Notes-3.0.2/#release-notes-302","text":".Net Core is now the primary framework used to control the environment and build for WSJT-X . As a result, several applications-name shortcuts have changed:","title":"Release Notes 3.0.2"},{"location":"windows/release-notes/Release-Notes-3.0.2/#primary-commands","text":"jtenv is used to set various environment / build conditions jtconfig is used to config control build parameters jtbuild is used to compile WSJT-X msys2 launches the MSYS2 console for building Hamlib","title":"Primary Commands"},{"location":"windows/release-notes/Release-Notes-3.0.2/#optioinal-environment-commands","text":"jtenv-py -h if Anaconda Python is installed. jtenv-jv -h if jtsdk-java-env is installed.","title":"Optioinal Environment Commands"},{"location":"windows/release-notes/Release-Notes-3.0.2/#jtenv-java-install","text":"NOTE - JTEnv Java requires both Java Tools and Java to be installed before building JTEnv Java. The jtenv-jv application has been converted to use to a stand-alone project jtsdk-java-apps and is not longer part of the .Net Core Installation (as a Java script).","title":"JTEnv Java Install"},{"location":"windows/release-notes/Release-Notes-3.0.2/#jtenv-installation","text":"To install, test, and use jtenv-jv , perform the following steps: # Open JTSDK-Env, and change directories to (C|D):\\JTSDK-Tools cd /d (C|D):\\JTSDK-Tools # Make a Source Directory (if not already present) mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-java-env.git # Change Directories and Make Install cd jtsdk-java-env\\jtenv make clean make build make install # Test Installation jtenv-jv -h","title":"JTEnv Installation"},{"location":"windows/upgrades/Postgresql-10.6/","text":"Application Data Installer Download EDB v10.6 Win-x86-64 Documentation PostgreSQL 10.6 Release Notes PostgreSQL 10.6 Overview \u00b6 The following guide is for upgrading to PostgreSQL-10.6 . It is assumed you have performed the initial installation as outlined in PostgreSQL Installation Documentation . Step-1 - Downlod Installer \u00b6 Download the EDB v10.6 Win-x86-64 installer, ensuring you select the Version 10.6 under Win-x86-64 bit . Step-2 - Stop PostgreSQL Server \u00b6 There are a number of ways to stop the PostgreSQL server instance. For this example, I'll be using the Windows Task Manager . * Right-Click the Windows Task Bar, then select Task Manager. * Select the Services Tab * Scroll down to: postgresql-x64-10 * Right-Click postgresql-x64-10 and select Stop. * Close Windows Task manager Windows Task Manager Step-3 - Run PostgreSQL Installer \u00b6 Browse to the location where the EDB v10.6 Win-x86-64 was saved, and run it. You should not need to change any options, with the exception of Deselecting Stack Builder . NOTE: During the installation process, the new server version will be started. There is no need to use Windows Task Manager to control the re-start. Step-4 - Post Install Bug Fix \u00b6 There is a bug in the installer environment script ( pg_env.bat ) that adds double-quotes around a critical path variable. This is easily fixed editing the file manually after installation. * Using Windows File Explorer, browse to: (C|D):\\JTSDK-Tools\\tools\\PostgreSQL\\10 * Right-Click on pg_env.bat and select Open with Code (VS Code). * Remove the Double-Quotes in Line (4). It should look similar to the following when finished: @SET PATH=D:\\JTSDK-Tools\\tools\\PostgreSQL\\10\\bin;%PATH% * Save pg_env.bat and exit VS Code. Step-5 - Verify Server Version \u00b6 After editing the pg_env.bat file, check the server is working properly by validating the new version. * Browse to and open JTSDK-Env * At the prompt, type: psql --version You should see Version 10.6 render. PostgreSQL v10.6 Check Feedback / Bug Reports \u00b6 If you run into problems with the upgrade, submit a ticket on the Issue Trracker .","title":"PostgreSQL-10.6"},{"location":"windows/upgrades/Postgresql-10.6/#overview","text":"The following guide is for upgrading to PostgreSQL-10.6 . It is assumed you have performed the initial installation as outlined in PostgreSQL Installation Documentation .","title":"Overview"},{"location":"windows/upgrades/Postgresql-10.6/#step-1-downlod-installer","text":"Download the EDB v10.6 Win-x86-64 installer, ensuring you select the Version 10.6 under Win-x86-64 bit .","title":"Step-1 - Downlod Installer"},{"location":"windows/upgrades/Postgresql-10.6/#step-2-stop-postgresql-server","text":"There are a number of ways to stop the PostgreSQL server instance. For this example, I'll be using the Windows Task Manager . * Right-Click the Windows Task Bar, then select Task Manager. * Select the Services Tab * Scroll down to: postgresql-x64-10 * Right-Click postgresql-x64-10 and select Stop. * Close Windows Task manager Windows Task Manager","title":"Step-2 - Stop PostgreSQL Server"},{"location":"windows/upgrades/Postgresql-10.6/#step-3-run-postgresql-installer","text":"Browse to the location where the EDB v10.6 Win-x86-64 was saved, and run it. You should not need to change any options, with the exception of Deselecting Stack Builder . NOTE: During the installation process, the new server version will be started. There is no need to use Windows Task Manager to control the re-start.","title":"Step-3 - Run PostgreSQL Installer"},{"location":"windows/upgrades/Postgresql-10.6/#step-4-post-install-bug-fix","text":"There is a bug in the installer environment script ( pg_env.bat ) that adds double-quotes around a critical path variable. This is easily fixed editing the file manually after installation. * Using Windows File Explorer, browse to: (C|D):\\JTSDK-Tools\\tools\\PostgreSQL\\10 * Right-Click on pg_env.bat and select Open with Code (VS Code). * Remove the Double-Quotes in Line (4). It should look similar to the following when finished: @SET PATH=D:\\JTSDK-Tools\\tools\\PostgreSQL\\10\\bin;%PATH% * Save pg_env.bat and exit VS Code.","title":"Step-4 - Post Install Bug Fix"},{"location":"windows/upgrades/Postgresql-10.6/#step-5-verify-server-version","text":"After editing the pg_env.bat file, check the server is working properly by validating the new version. * Browse to and open JTSDK-Env * At the prompt, type: psql --version You should see Version 10.6 render. PostgreSQL v10.6 Check","title":"Step-5 - Verify Server Version"},{"location":"windows/upgrades/Postgresql-10.6/#feedback-bug-reports","text":"If you run into problems with the upgrade, submit a ticket on the Issue Trracker .","title":"Feedback / Bug Reports"},{"location":"windows/upgrades/Upgrade-3.0.1/","text":"Application Data Name JTSDK Upgrade 3.0.1 Description Net Core Apps used in JTSDK v3 Release Notes Version 3.0.1 Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. Prerequisite Tools Installation Core Tool Installation # Open a Windows Console, then change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Make a Source Directory mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-dotnet-core.git # Change Directories and Make Install cd jtsdk-dotnet-core make install Upgrade \u00b6 If the source clone is still present on the system, upgrading is the same as installation, with an additional pull command. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install This concludes the installation and / or upgrade for JTSDK Core Applications .","title":"3.0.1"},{"location":"windows/upgrades/Upgrade-3.0.1/#upgrade","text":"If the source clone is still present on the system, upgrading is the same as installation, with an additional pull command. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install This concludes the installation and / or upgrade for JTSDK Core Applications .","title":"Upgrade"},{"location":"windows/upgrades/Upgrade-3.0.2/","text":"Application Data Name JTSDK Upgrade 3.0.2 Description Net Core Apps used in JTSDK v3 Release Notes Version 3.0.2 Installation of this package should follow the tool-chain installation and setup. If you've not already done so, review the following guides before checking out and compiling the source code. Prerequisite Tools Installation Core Tool Installation Remove Old Files and Folders \u00b6 # Using Windows Explorer, remove the following files and folders (if installed) Browse to (C|D):\\JTSDK-Tools # Remove folders (C|D):\\JTSDK-Tools\\env (C|D):\\JTSDK-Tools\\scripts # Remove files (C|D):\\JTSDK-Tools\\jtsdk-env.cmd (C|D):\\JTSDK-Tools\\ver.git (C|D):\\JTSDK-Tools\\ver.jtsdk Installation \u00b6 # Open a Windows Console, then change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Make a Source Directory mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-dotnet-core.git # Change Directories and Make Install cd jtsdk-dotnet-core make install Upgrade \u00b6 If the source clone is still present on the system, upgrading is the same as installation, with an additional pull and clean commands. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install NOTE - If you have problems doing the pull, or upgrade, remove the source folder jtsdk-dotnet-core and perform a new installation using the instructions from above. This concludes the installation and / or upgrade for JTSDK Core Applications .","title":"3.0.2"},{"location":"windows/upgrades/Upgrade-3.0.2/#remove-old-files-and-folders","text":"# Using Windows Explorer, remove the following files and folders (if installed) Browse to (C|D):\\JTSDK-Tools # Remove folders (C|D):\\JTSDK-Tools\\env (C|D):\\JTSDK-Tools\\scripts # Remove files (C|D):\\JTSDK-Tools\\jtsdk-env.cmd (C|D):\\JTSDK-Tools\\ver.git (C|D):\\JTSDK-Tools\\ver.jtsdk","title":"Remove Old Files and Folders"},{"location":"windows/upgrades/Upgrade-3.0.2/#installation","text":"# Open a Windows Console, then change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Make a Source Directory mkdir src # Change Directories and Clone cd src git clone https://github.com/KI7MT/jtsdk-dotnet-core.git # Change Directories and Make Install cd jtsdk-dotnet-core make install","title":"Installation"},{"location":"windows/upgrades/Upgrade-3.0.2/#upgrade","text":"If the source clone is still present on the system, upgrading is the same as installation, with an additional pull and clean commands. If not, use the installation steps from above. # Change directories to the JTSDK-Tools installation cd /d (C|D):\\JTSDK-Tools # Set Temporary JTSDK_HOME variable set JTSDK_HOME=%CD% # Change Directories To The Cloned Repository cd /d %JTSDK_HOME%\\src\\jtsdk-dotnet-core # Clean the build tree make clean # Update Source git pull origin master # Install New Update make install NOTE - If you have problems doing the pull, or upgrade, remove the source folder jtsdk-dotnet-core and perform a new installation using the instructions from above. This concludes the installation and / or upgrade for JTSDK Core Applications .","title":"Upgrade"}]}